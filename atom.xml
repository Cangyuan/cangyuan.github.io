<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orca&#39;s Notes</title>
  
  <subtitle>逆戟 · 个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-17T15:03:10.538Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ORCA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何用Github的gh-pages分支展示自己的项目</title>
    <link href="http://yoursite.com/2017/12/17/%E5%A6%82%E4%BD%95%E7%94%A8Github%E7%9A%84gh-pages%E5%88%86%E6%94%AF%E5%B1%95%E7%A4%BA%E8%87%AA%E5%B7%B1%E7%9A%84%E9%A1%B9%E7%9B%AE/"/>
    <id>http://yoursite.com/2017/12/17/如何用Github的gh-pages分支展示自己的项目/</id>
    <published>2017-12-17T14:55:31.000Z</published>
    <updated>2017-12-17T15:03:10.538Z</updated>
    
    <content type="html"><![CDATA[<p>通过git-add -A、git -commit -m “…” 命令把完成的项目上传到github上以后，默认的是处于master分支，你可以进该案例地址看看项目结构。接着我们要展现dist目录下的静态文件，那最关键的语句来了</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git subtree push --prefix=dist origin gh-pages</span><br></pre></td></tr></table></figure><p>意思就是把指定的dist文件提交到gh-pages分支上</p><p>这时候，我们看到已经多出了一个gh-pages分支，那么展示地址就是 Github用户名.github.io/创建的仓库名 拿我的这个案例来讲，它的展示地址就是<a href="https://cangyuan.github.io/sell" target="_blank" rel="noopener">仿饿了么演示</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;通过git-add -A、git -commit -m “…” 命令把完成的项目上传到github上以后，默认的是处于master分支，你可以进该案例地址看看项目结构。接着我们要展现dist目录下的静态文件，那最关键的语句来了&lt;/p&gt;
&lt;figure class=&quot;high
      
    
    </summary>
    
      <category term="Git" scheme="http://yoursite.com/categories/Git/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
      <category term="git" scheme="http://yoursite.com/tags/git/"/>
    
      <category term="gh-pages" scheme="http://yoursite.com/tags/gh-pages/"/>
    
  </entry>
  
  <entry>
    <title>vue+webpack为生产环境和发布环境配置不同的接口地址</title>
    <link href="http://yoursite.com/2017/12/17/vue-webpack%E4%B8%BA%E7%94%9F%E4%BA%A7%E7%8E%AF%E5%A2%83%E5%92%8C%E5%8F%91%E5%B8%83%E7%8E%AF%E5%A2%83%E9%85%8D%E7%BD%AE%E4%B8%8D%E5%90%8C%E7%9A%84%E6%8E%A5%E5%8F%A3%E5%9C%B0%E5%9D%80/"/>
    <id>http://yoursite.com/2017/12/17/vue-webpack为生产环境和发布环境配置不同的接口地址/</id>
    <published>2017-12-17T14:36:31.000Z</published>
    <updated>2017-12-17T15:14:36.843Z</updated>
    
    <content type="html"><![CDATA[<p>#vue2项目npm run build后将dist目录和index.html文件部署到本地服务器<br>若出现访问空白时，找到config/index.js<br>将assetsPublicPath:改为 ‘./‘<br>重新编译就能显示页面了</p><p>#第一步，分别设置不同的接口地址<br>首先，我们分别找到下面的文件：</p><div class="note info"><p>/config/dev.env.js<br>/config/prod.env.js</p></div><p>我们打开dev.en.js文件。代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var merge = require(<span class="string">'webpack-merge'</span>)</span><br><span class="line">var prodEnv = require(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后，我们在NODE_ENV下面增加一项，代码如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">var merge = require(<span class="string">'webpack-merge'</span>)</span><br><span class="line">var prodEnv = require(<span class="string">'./prod.env'</span>)</span><br><span class="line"></span><br><span class="line">module.exports = merge(prodEnv, &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"development"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"//192.168.1.8/api"'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>然后，我们编辑prod.env.js文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  NODE_ENV: <span class="string">'"production"'</span>,</span><br><span class="line">  API_ROOT: <span class="string">'"//www.baidu.com/api"'</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><a id="more"></a><p>#第二部，在代码中调用设置好的参数</p><p>打开src/config/api.js文件</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置API接口地址</span><br><span class="line">var root = <span class="string">'https://cnodejs.org/api/v1'</span></span><br></pre></td></tr></table></figure><p>修改为</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">// 配置API接口地址</span><br><span class="line">var root = process.env.API_ROOT</span><br></pre></td></tr></table></figure><p>配置完成之后，运行下列代码,跑测试接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run dev</span><br></pre></td></tr></table></figure><p>然后运行下列代码，打包项目，打包后跑的是服务器正式接口</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm run build</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;#vue2项目npm run build后将dist目录和index.html文件部署到本地服务器&lt;br&gt;若出现访问空白时，找到config/index.js&lt;br&gt;将assetsPublicPath:改为 ‘./‘&lt;br&gt;重新编译就能显示页面了&lt;/p&gt;
&lt;p&gt;#第一步，分别设置不同的接口地址&lt;br&gt;首先，我们分别找到下面的文件：&lt;/p&gt;
&lt;div class=&quot;note info&quot;&gt;&lt;p&gt;/config/dev.env.js&lt;br&gt;/config/prod.env.js&lt;/p&gt;&lt;/div&gt;
&lt;p&gt;我们打开dev.en.js文件。代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var merge = require(&lt;span class=&quot;string&quot;&gt;&#39;webpack-merge&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var prodEnv = require(&lt;span class=&quot;string&quot;&gt;&#39;./prod.env&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = merge(prodEnv, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NODE_ENV: &lt;span class=&quot;string&quot;&gt;&#39;&quot;development&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们在NODE_ENV下面增加一项，代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var merge = require(&lt;span class=&quot;string&quot;&gt;&#39;webpack-merge&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var prodEnv = require(&lt;span class=&quot;string&quot;&gt;&#39;./prod.env&#39;&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;module.exports = merge(prodEnv, &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NODE_ENV: &lt;span class=&quot;string&quot;&gt;&#39;&quot;development&quot;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  API_ROOT: &lt;span class=&quot;string&quot;&gt;&#39;&quot;//192.168.1.8/api&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后，我们编辑prod.env.js文件&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;module.exports = &amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  NODE_ENV: &lt;span class=&quot;string&quot;&gt;&#39;&quot;production&quot;&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  API_ROOT: &lt;span class=&quot;string&quot;&gt;&#39;&quot;//www.baidu.com/api&quot;&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>node.js之path模块</title>
    <link href="http://yoursite.com/2017/12/10/node-js%E4%B9%8Bpath%E6%A8%A1%E5%9D%97%E8%A7%A3%E6%9E%90/"/>
    <id>http://yoursite.com/2017/12/10/node-js之path模块解析/</id>
    <published>2017-12-10T15:55:44.000Z</published>
    <updated>2017-12-11T09:25:46.118Z</updated>
    
    <content type="html"><![CDATA[<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">//引用该模块</span><br><span class="line">var path = require(<span class="string">"path"</span>);</span><br></pre></td></tr></table></figure><p>1、路径解析，得到规范化的路径格式</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//对window系统，目录分隔为<span class="string">'\'</span>, 对于UNIX系统，分隔符为<span class="string">'/'</span>，针对<span class="string">'..'</span>返回上一级；/与\\都被统一转换</span><br><span class="line">//path.normalize(p);</span><br><span class="line"></span><br><span class="line">var myPath = path.normalize(__dirname + <span class="string">'/test/a//b//../c/utilyou.mp3'</span>);</span><br><span class="line">console.log(myPath); //windows: E:\workspace\NodeJS\app\fs\<span class="built_in">test</span>\a\c\utilyou.mp3</span><br></pre></td></tr></table></figure><p>2、路径结合、合并，路径最后不会带目录分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//path.join([path1],[path2]..[pathn]);</span><br><span class="line">/**</span><br><span class="line"> * [path1] 路径或表示目录的字符，</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var path1 = <span class="string">'path1'</span>,</span><br><span class="line">    path2 = <span class="string">'path2//pp\\'</span>,</span><br><span class="line">    path3 = <span class="string">'../path3'</span>;</span><br><span class="line">    </span><br><span class="line">var myPath = path.join(path1, path2, path3);</span><br><span class="line">console.log(myPath); //path1\path2\path3</span><br></pre></td></tr></table></figure><a id="more"></a><p>3、获取绝对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">//path.resolve(path1, [path2]..[pathn]);</span><br><span class="line"></span><br><span class="line">//以应用程序为起点，根据参数字符串解析出一个绝对路径</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * path 必须至少一个路径字符串值</span><br><span class="line"> * [pathn] 可选路径字符串</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var myPath = path.resolve(<span class="string">'path1'</span>, <span class="string">'path2'</span>, <span class="string">'a/b\\c/'</span>);</span><br><span class="line">console.log(myPath);//E:\workspace\NodeJS\path1\path2\a\b\c</span><br></pre></td></tr></table></figure><p>4、获取相对路径</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//path.relative(from, to);</span><br><span class="line">//获取两路径之间的相对关系</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * from 当前路径，并且方法返回值是基于from指定到to的相对路径</span><br><span class="line"> * to   到哪路径，</span><br><span class="line"> */</span><br><span class="line"></span><br><span class="line">var from = <span class="string">'c:\\from\\a\\'</span>,</span><br><span class="line">    to = <span class="string">'c:/test/b'</span>;</span><br><span class="line"></span><br><span class="line">var _path = path.relative(from, to);</span><br><span class="line">console.log(_path); //..\..\<span class="built_in">test</span>\b; 表示从from到to的相对路径</span><br></pre></td></tr></table></figure><p>5、path.dirname(p)</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取路径中目录名</span><br><span class="line"></span><br><span class="line">var myPath = path.dirname(__dirname + <span class="string">'/test/util you.mp3'</span>);</span><br><span class="line">console.log(myPath);</span><br></pre></td></tr></table></figure><p>6、path.basename(path, [ext])</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 获取路径中文件名,后缀是可选的，如果加，请使用<span class="string">'.ext'</span>方式来匹配，则返回值中不包括后缀名；</span><br><span class="line"></span><br><span class="line">var myPath = path.basename(__dirname + <span class="string">'/test/util you.mp3'</span>, <span class="string">'.mp3'</span>);</span><br><span class="line">console.log(myPath);</span><br></pre></td></tr></table></figure><p>7、path.extname(path)</p><p>获取路径中的扩展名，如果没有’.’，则返回空</p><p>8、path.sep属性</p><p>返回操作系统中文件分隔符； window是’\‘, Unix是’/‘</p><p>9、path.delimiter属性</p><p>返回操作系统中目录分隔符，如window是’;’, Unix中是’:’</p>]]></content>
    
    <summary type="html">
    
      &lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//引用该模块&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var path = require(&lt;span class=&quot;string&quot;&gt;&quot;path&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;1、路径解析，得到规范化的路径格式&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//对window系统，目录分隔为&lt;span class=&quot;string&quot;&gt;&#39;\&#39;&lt;/span&gt;, 对于UNIX系统，分隔符为&lt;span class=&quot;string&quot;&gt;&#39;/&#39;&lt;/span&gt;，针对&lt;span class=&quot;string&quot;&gt;&#39;..&#39;&lt;/span&gt;返回上一级；/与\\都被统一转换&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;//path.normalize(p);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myPath = path.normalize(__dirname + &lt;span class=&quot;string&quot;&gt;&#39;/test/a//b//../c/utilyou.mp3&#39;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(myPath); //windows: E:\workspace\NodeJS\app\fs\&lt;span class=&quot;built_in&quot;&gt;test&lt;/span&gt;\a\c\utilyou.mp3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、路径结合、合并，路径最后不会带目录分隔符&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;//path.join([path1],[path2]..[pathn]);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;/**&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * [path1] 路径或表示目录的字符，&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; */&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var path1 = &lt;span class=&quot;string&quot;&gt;&#39;path1&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path2 = &lt;span class=&quot;string&quot;&gt;&#39;path2//pp\\&#39;&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    path3 = &lt;span class=&quot;string&quot;&gt;&#39;../path3&#39;&lt;/span&gt;;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var myPath = path.join(path1, path2, path3);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;console.log(myPath); //path1\path2\path3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="path" scheme="http://yoursite.com/tags/path/"/>
    
      <category term="模块" scheme="http://yoursite.com/tags/%E6%A8%A1%E5%9D%97/"/>
    
  </entry>
  
  <entry>
    <title>Node中http模块详解</title>
    <link href="http://yoursite.com/2017/12/10/Node%E4%B8%ADhttp%E6%A8%A1%E5%9D%97%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/10/Node中http模块详解/</id>
    <published>2017-12-10T15:03:45.000Z</published>
    <updated>2017-12-11T09:25:41.749Z</updated>
    
    <content type="html"><![CDATA[<p>Node中提供了http模块，其中封装了高效的http服务器和http客户端<br>http.server是一个基于事件的HTTP服务器，内部是由c++实现的，接口由JavaScript封装<br>http.request是一个HTTP客户端工具。用户向服务器发送数据。<br>下面就来分别得介绍一下http的服务端和客户端</p><h2 id="一、HTTP服务器"><a href="#一、HTTP服务器" class="headerlink" title="一、HTTP服务器"></a>一、HTTP服务器</h2><p>http.Server实现的，它提供了一套封装级别很低的API，仅仅是流控制和简单的解析，所有的高层功能都需要通过它的接口，就像在前面的文章《Node入门必须知道的事情》中创建的服务器一样是特别的简单的。<br>下面分别来讲一个有关http服务器的几个事件</p><h3 id="1-http-server事件"><a href="#1-http-server事件" class="headerlink" title="1.http.server事件"></a>1.http.server事件</h3><p>http.server是一个基于事件的HTTP服务器，所有的请求都被封装到独立的事件当中，我们只需要对他的事件编写相应的行数就可以实现HTTP服务器的所有功能，它继承自EventEmitter,提供了以下的事件：</p><ul><li><p>request：当客户端请求到来的时候，该事件被触发，提供两个参数request和response，分别是http.ServerRequest和http.ServerResponse表示请求和响应的信息。 </p></li><li><p>connection：当TCP建立连接的时候，该事件被触发，提供了一个参数socket，为net.socket的实例(底层协议对象) </p></li><li><p>close：当服务器关闭的时候会被触发 </p></li><li><p>除此之外还有checkContinue、upgrade、clientError等事件 </p></li></ul><p>我们最常用的还是request事件，http也给这个事件提供了一个捷径：http.createServer([requestListener])<br>下面我们来简单的看一下两个案例： </p><a id="more"></a><p>第一个是使用request事件的：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const net  = require(<span class="string">'net'</span>);</span><br><span class="line">const util = require(<span class="string">'util'</span>);</span><br><span class="line">//随便定义的一个函数，下面会用到</span><br><span class="line"><span class="keyword">function</span>  <span class="function"><span class="title">a</span></span>()&#123;</span><br><span class="line">    console.log(<span class="string">"dajiahao"</span>);</span><br><span class="line">&#125;</span><br><span class="line">var server = new http.Server();</span><br><span class="line">server.on(<span class="string">'request'</span>,(req,res)=&gt;&#123;</span><br><span class="line">    console.log(req.url);</span><br><span class="line">    //设置应答头信息</span><br><span class="line">    res.writeHead(200,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/html'</span>&#125;);</span><br><span class="line">    res.write(<span class="string">'hello we are family&lt;br&gt;'</span>);</span><br><span class="line">    res.end(<span class="string">'server already end\n'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">//显示了三次这也证明了TCP的三次握手</span><br><span class="line">server.on(<span class="string">'connection'</span>,()=&gt;&#123;</span><br><span class="line">    a();</span><br><span class="line">&#125;);</span><br><span class="line">server.on(<span class="string">'close'</span>,()=&gt;&#123;</span><br><span class="line">    console.log(<span class="string">'server will close'</span>);</span><br><span class="line">&#125;);</span><br><span class="line">//关闭服务为了触发close事件</span><br><span class="line">server.close();</span><br><span class="line">server.listen(8080);</span><br></pre></td></tr></table></figure><p>下面的案例使用http的给的捷径http.createServer制作的代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const net  = require(<span class="string">'net'</span>);</span><br><span class="line">const util = require(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">http.createServer(<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    res.writeHead(404,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">    res.write(<span class="string">"we are is content"</span>);</span><br><span class="line">    res.end(<span class="string">"fdsa"</span>);</span><br><span class="line"></span><br><span class="line">&#125;).listen(3000);</span><br></pre></td></tr></table></figure><h3 id="2-http-ServerRequset请求信息"><a href="#2-http-ServerRequset请求信息" class="headerlink" title="2.http.ServerRequset请求信息"></a>2.http.ServerRequset请求信息</h3><p>我们都知道HTTP请求分为两部分：请求头和请求体，如果请求的内容少的话就直接在请求头协议完成之后立即读取，请求体可能相对较长一点，需要一定的时间传输。因此提供了三个事件用于控制请求体传输. </p><ul><li><p>data：当请求体数据到来时，该事件被触发，该事件一共一个参数chunk，表示接受到的数据。 </p></li><li><p>end：当请求体数据传输完成时，该事件被触发，此后将不会再有数据到来。 </p></li><li><p>close：用户当前请求结束时，该事件被触发，不同于end，如果用户强制终止了传输，也会触发close </p></li></ul><p>ServerRequest的属性</p><table><thead><tr><th style="text-align:center">名称</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:center">ccomplete</td><td style="text-align:center">客户端请求是否已经发送完成</td></tr><tr><td style="text-align:center">httpVersion</td><td style="text-align:center">HTTP协议版本，通常是1.0或1.1</td></tr><tr><td style="text-align:center">method</td><td style="text-align:center">HTTP请求方法，如：GET,POST</td></tr><tr><td style="text-align:center">url</td><td style="text-align:center">原始的请求路径</td></tr><tr><td style="text-align:center">headers</td><td style="text-align:center">HTTP请求头</td></tr><tr><td style="text-align:center">trailers</td><td style="text-align:center">HTTP请求尾(不常见)</td></tr><tr><td style="text-align:center">connection</td><td style="text-align:center">当前HTTP连接套接字，为net.Socket的实例</td></tr><tr><td style="text-align:center">socket</td><td style="text-align:center">connection属性的别名</td></tr><tr><td style="text-align:center">client</td><td style="text-align:center">client属性的别名</td></tr></tbody></table><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">http.createServer(<span class="keyword">function</span>(req,res)&#123;</span><br><span class="line">    console.log(req.httpVersion);</span><br><span class="line">    //console.log(req.socket);</span><br><span class="line">    console.log(req.headers);</span><br><span class="line">    console.log(req.method);</span><br><span class="line">    res.writeHead(404,&#123;<span class="string">'Content-Type'</span>:<span class="string">'text/plain'</span>&#125;)</span><br><span class="line">    res.write(<span class="string">"we are is content"</span>);</span><br><span class="line">    res.end(<span class="string">"fdsa"</span>);</span><br><span class="line">&#125;).listen(8080);</span><br></pre></td></tr></table></figure><h3 id="3-获取GET请求内容"><a href="#3-获取GET请求内容" class="headerlink" title="3.获取GET请求内容"></a>3.获取GET请求内容</h3><p>由于GET请求直接被嵌入在路径中,URL完整的请求路径，包括了?后面的部分，因此你可以手动解析后面的内容作为GET的参数，Nodejs的url模块中的parse函数提供了这个功能</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const net  = require(<span class="string">'net'</span>);</span><br><span class="line">const url  = require(<span class="string">'url'</span>);</span><br><span class="line">const util = require(<span class="string">'util'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    res.write(util.inspect(url.parse(req.url,<span class="literal">true</span>)));</span><br><span class="line">    //利用url模块去解析客户端发送过来的URL</span><br><span class="line">    res.end(util.inspect(url.parse(req.url,<span class="literal">false</span>)));</span><br><span class="line">&#125;).listen(8080);</span><br></pre></td></tr></table></figure><h3 id="4-获得POST请求内容"><a href="#4-获得POST请求内容" class="headerlink" title="4.获得POST请求内容"></a>4.获得POST请求内容</h3><p>POST请求的内容全部都在请求体中，http.ServerRequest并没有一个属性内容为请求体，原因是等待请求体传输可能是一件耗时的工作。譬如上传文件。恶意的POST请求会大大消耗服务器的资源。所以Nodejs是不会解析请求体，当你需要的时候，需要手动来做。<br>简单的看一下代码：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">const http = require(<span class="string">'http'</span>);</span><br><span class="line">const net  = require(<span class="string">'net'</span>);</span><br><span class="line">const url  = require(<span class="string">'url'</span>);</span><br><span class="line">const util = require(<span class="string">'util'</span>);</span><br><span class="line">//querystring用于处理URL中的查询字符串</span><br><span class="line">const querystring = require(<span class="string">'querystring'</span>);</span><br><span class="line"></span><br><span class="line">http.createServer((req,res)=&gt;&#123;</span><br><span class="line">    var posr = <span class="string">''</span>;</span><br><span class="line">    req.on(<span class="string">'data'</span>,(chunk)=&gt;&#123;</span><br><span class="line">        post+=chunk;</span><br><span class="line">    &#125;);</span><br><span class="line">    res,on(<span class="string">'end'</span>,()=&gt;&#123;</span><br><span class="line">        //将字符串变为json的格式</span><br><span class="line">        post  =  querystring.parse(post);</span><br><span class="line">        //向前端返回字符串</span><br><span class="line">        res.end(util.inspect(post));</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="5-http-ServerResponse返回客户端信息"><a href="#5-http-ServerResponse返回客户端信息" class="headerlink" title="5.http.ServerResponse返回客户端信息"></a>5.http.ServerResponse返回客户端信息</h2><p>决定了用户最终能到的结果，它是由http.Server的request事件发送的，作为第二个参数传递。一般为response或res<br>主要的三个函数：<br>response.writeHead(statusCode,[headers])：向请求的客户端发送响应头。<br>statusCode是HTTP的状态码，如200为成功，404未找到等。<br>headers是一个类似关联数组的对象，表示响应头的每个属性。<br>response.write(data,[encoding]) 向请求客户端发送相应内容，data是buffer或字符串，encoding为编码<br>response.end([data],[encoding]) 结束响应，告知用户所有发送已经完成，当所有要返回的内容发送完毕，该函数必须被调用一次，如果不调用，客户端永远处于等待状态</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Node中提供了http模块，其中封装了高效的http服务器和http客户端&lt;br&gt;http.server是一个基于事件的HTTP服务器，内部是由c++实现的，接口由JavaScript封装&lt;br&gt;http.request是一个HTTP客户端工具。用户向服务器发送数据。&lt;br&gt;下面就来分别得介绍一下http的服务端和客户端&lt;/p&gt;
&lt;h2 id=&quot;一、HTTP服务器&quot;&gt;&lt;a href=&quot;#一、HTTP服务器&quot; class=&quot;headerlink&quot; title=&quot;一、HTTP服务器&quot;&gt;&lt;/a&gt;一、HTTP服务器&lt;/h2&gt;&lt;p&gt;http.Server实现的，它提供了一套封装级别很低的API，仅仅是流控制和简单的解析，所有的高层功能都需要通过它的接口，就像在前面的文章《Node入门必须知道的事情》中创建的服务器一样是特别的简单的。&lt;br&gt;下面分别来讲一个有关http服务器的几个事件&lt;/p&gt;
&lt;h3 id=&quot;1-http-server事件&quot;&gt;&lt;a href=&quot;#1-http-server事件&quot; class=&quot;headerlink&quot; title=&quot;1.http.server事件&quot;&gt;&lt;/a&gt;1.http.server事件&lt;/h3&gt;&lt;p&gt;http.server是一个基于事件的HTTP服务器，所有的请求都被封装到独立的事件当中，我们只需要对他的事件编写相应的行数就可以实现HTTP服务器的所有功能，它继承自EventEmitter,提供了以下的事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;request：当客户端请求到来的时候，该事件被触发，提供两个参数request和response，分别是http.ServerRequest和http.ServerResponse表示请求和响应的信息。 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;connection：当TCP建立连接的时候，该事件被触发，提供了一个参数socket，为net.socket的实例(底层协议对象) &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;close：当服务器关闭的时候会被触发 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;除此之外还有checkContinue、upgrade、clientError等事件 &lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我们最常用的还是request事件，http也给这个事件提供了一个捷径：http.createServer([requestListener])&lt;br&gt;下面我们来简单的看一下两个案例： &lt;/p&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
  </entry>
  
  <entry>
    <title>Git之解决冲突</title>
    <link href="http://yoursite.com/2017/12/10/Git%E4%B9%8B%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/"/>
    <id>http://yoursite.com/2017/12/10/Git之解决冲突/</id>
    <published>2017-12-10T14:25:36.000Z</published>
    <updated>2017-12-11T08:40:06.018Z</updated>
    
    <content type="html"><![CDATA[<p>人生不如意之事十之八九，合并分支往往也不是一帆风顺的。</p><p>准备新的feature1分支，继续我们的新分支开发：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout -b feature1</span><br><span class="line">Switched to a new branch <span class="string">'feature1'</span></span><br></pre></td></tr></table></figure><p>修改readme.txt最后一行，改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick AND simple.</span><br></pre></td></tr></table></figure><p>在feature1分支上提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">"AND simple"</span></span><br><span class="line">[feature1 75a857c] AND simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>切换到master分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git checkout master</span><br><span class="line">Switched to branch <span class="string">'master'</span></span><br><span class="line">Your branch is ahead of <span class="string">'origin/master'</span> by 1 commit.</span><br></pre></td></tr></table></figure><p>Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。</p><a id="more"></a><p>在master分支上把readme.txt文件的最后一行改为：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick &amp; simple.</span><br></pre></td></tr></table></figure><p>提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">"&amp; simple"</span></span><br><span class="line">[master 400b400] &amp; simple</span><br><span class="line"> 1 file changed, 1 insertion(+), 1 deletion(-)</span><br></pre></td></tr></table></figure><p>现在，master分支和feature1分支各自都分别有新的提交，变成了这样：</p><p><img src="/imgs/git-05.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>这种情况下，Git无法执行“快速合并”，只能试图把各自的修改合并起来，但这种合并就可能会有冲突，我们试试看：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ git merge feature1</span><br><span class="line">Auto-merging readme.txt</span><br><span class="line">CONFLICT (content): Merge conflict <span class="keyword">in</span> readme.txt</span><br><span class="line">Automatic merge failed; fix conflicts and <span class="keyword">then</span> commit the result.</span><br></pre></td></tr></table></figure><p>果然冲突了！Git告诉我们，readme.txt文件存在冲突，必须手动解决冲突后再提交。git status也可以告诉我们冲突的文件：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ git status</span><br><span class="line"><span class="comment"># On branch master</span></span><br><span class="line"><span class="comment"># Your branch is ahead of 'origin/master' by 2 commits.</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># Unmerged paths:</span></span><br><span class="line"><span class="comment">#   (use "git add/rm &lt;file&gt;..." as appropriate to mark resolution)</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment">#       both modified:      readme.txt</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line">no changes added to commit (use <span class="string">"git add"</span> and/or <span class="string">"git commit -a"</span>)</span><br></pre></td></tr></table></figure><p>我们可以直接查看readme.txt的内容：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Git is a distributed version control system.</span><br><span class="line">Git is free software distributed under the GPL.</span><br><span class="line">Git has a mutable index called stage.</span><br><span class="line">Git tracks changes of files.</span><br><span class="line">&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD</span><br><span class="line">Creating a new branch is quick &amp; simple.</span><br><span class="line">=======</span><br><span class="line">Creating a new branch is quick AND simple.</span><br><span class="line">&gt;&gt;&gt;&gt;&gt;&gt;&gt; feature1</span><br></pre></td></tr></table></figure><p>Git用&lt;&lt;&lt;&lt;&lt;&lt;&lt;，=======，&gt;&gt;&gt;&gt;&gt;&gt;&gt;标记出不同分支的内容，我们修改如下后保存：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Creating a new branch is quick and simple.</span><br></pre></td></tr></table></figure><p>再提交：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ git add readme.txt </span><br><span class="line">$ git commit -m <span class="string">"conflict fixed"</span></span><br><span class="line">[master 59bc1cb] conflict fixed</span><br></pre></td></tr></table></figure><p>现在，master分支和feature1分支变成了下图所示：</p><p><img src="/imgs/git-06.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>用带参数的git log也可以看到分支的合并情况：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$ git <span class="built_in">log</span> --graph --pretty=oneline --abbrev-commit</span><br><span class="line">*   59bc1cb conflict fixed</span><br><span class="line">|\</span><br><span class="line">| * 75a857c AND simple</span><br><span class="line">* | 400b400 &amp; simple</span><br><span class="line">|/</span><br><span class="line">* fec145a branch <span class="built_in">test</span></span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>最后，删除feature1分支：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ git branch -d feature1</span><br><span class="line">Deleted branch feature1 (was 75a857c).</span><br></pre></td></tr></table></figure><p>工作完成。</p><h2 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h2><p>当Git无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p><p>用git log –graph命令可以看到分支合并图。</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;人生不如意之事十之八九，合并分支往往也不是一帆风顺的。&lt;/p&gt;
&lt;p&gt;准备新的feature1分支，继续我们的新分支开发：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout -b feature1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to a new branch &lt;span class=&quot;string&quot;&gt;&#39;feature1&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;修改readme.txt最后一行，改为：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;Creating a new branch is quick AND simple.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在feature1分支上提交：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git add readme.txt &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;$ git commit -m &lt;span class=&quot;string&quot;&gt;&quot;AND simple&quot;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;[feature1 75a857c] AND simple&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; 1 file changed, 1 insertion(+), 1 deletion(-)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;切换到master分支：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git checkout master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Switched to branch &lt;span class=&quot;string&quot;&gt;&#39;master&#39;&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Your branch is ahead of &lt;span class=&quot;string&quot;&gt;&#39;origin/master&#39;&lt;/span&gt; by 1 commit.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;Git还会自动提示我们当前master分支比远程的master分支要超前1个提交。&lt;/p&gt;
    
    </summary>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="解决冲突" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/%E8%A7%A3%E5%86%B3%E5%86%B2%E7%AA%81/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>vue之vue-source插件</title>
    <link href="http://yoursite.com/2017/12/10/vue%E4%B9%8Bvue-source%E6%8F%92%E4%BB%B6/"/>
    <id>http://yoursite.com/2017/12/10/vue之vue-source插件/</id>
    <published>2017-12-10T14:12:50.000Z</published>
    <updated>2017-12-11T09:26:16.905Z</updated>
    
    <content type="html"><![CDATA[<p>vue-resource是一个通过XMLHttpRequest或者JSONP技术实现异步加载服务端数据的插件。</p><h2 id="安装vue-resource"><a href="#安装vue-resource" class="headerlink" title="安装vue-resource"></a>安装vue-resource</h2><p>npm安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm i vue  vue-resource  --save-dev</span><br></pre></td></tr></table></figure><p>然后在引入，以及注册</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">var Vue = require(<span class="string">"vue"</span>);</span><br><span class="line">var VueResource = require(<span class="string">"vue-resource"</span>);</span><br><span class="line">Vue.use(VueResource);</span><br></pre></td></tr></table></figure><p>brower安装</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">brower install vue-resource</span><br></pre></td></tr></table></figure><a id="more"></a><p>引入的话</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"../vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;script src=<span class="string">"../vue-resource.js"</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><h2 id="基于HTTP的调用"><a href="#基于HTTP的调用" class="headerlink" title="基于HTTP的调用"></a>基于HTTP的调用</h2><p>全局调用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.http(option)</span><br><span class="line">``` </span><br><span class="line"></span><br><span class="line">组件实例调用</span><br><span class="line"></span><br><span class="line">``` bash</span><br><span class="line">this.http(option)</span><br></pre></td></tr></table></figure><p>都是根据所传option参数的method属性判断请求方式是get,post还是其他方式</p><p>实例</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">new Vue(&#123;</span><br><span class="line">    ready:<span class="function"><span class="title">function</span></span>()&#123;</span><br><span class="line">            this.<span class="variable">$http</span>(&#123;</span><br><span class="line">               url:<span class="string">'/url/...'</span>,</span><br><span class="line">               method:<span class="string">'POST'</span>,</span><br><span class="line">               data:&#123;</span><br><span class="line">                      aaa:<span class="string">"11111"</span></span><br><span class="line">               &#125;,</span><br><span class="line">               headers:&#123;</span><br><span class="line">               <span class="string">'content-Type'</span>:<span class="string">'x-www-form-urlencoded'</span></span><br><span class="line">            &#125;   </span><br><span class="line">     &#125;).<span class="keyword">then</span>(</span><br><span class="line">        <span class="keyword">function</span>(res)&#123;</span><br><span class="line">        //成功的处理</span><br><span class="line">        &#125;，</span><br><span class="line">        <span class="keyword">function</span>(res)&#123;</span><br><span class="line">        //失败的处理</span><br><span class="line">        &#125;</span><br><span class="line">    )  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;vue-resource是一个通过XMLHttpRequest或者JSONP技术实现异步加载服务端数据的插件。&lt;/p&gt;
&lt;h2 id=&quot;安装vue-resource&quot;&gt;&lt;a href=&quot;#安装vue-resource&quot; class=&quot;headerlink&quot; title=&quot;安装vue-resource&quot;&gt;&lt;/a&gt;安装vue-resource&lt;/h2&gt;&lt;p&gt;npm安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;npm i vue  vue-resource  --save-dev&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在引入，以及注册&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;var Vue = require(&lt;span class=&quot;string&quot;&gt;&quot;vue&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var VueResource = require(&lt;span class=&quot;string&quot;&gt;&quot;vue-resource&quot;&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Vue.use(VueResource);&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;brower安装&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;brower install vue-resource&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="vue插件" scheme="http://yoursite.com/tags/vue%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue2+Webpack2零开始上手</title>
    <link href="http://yoursite.com/2017/12/10/Vue2-Webpack2%E9%9B%B6%E5%BC%80%E5%A7%8B%E4%B8%8A%E6%89%8B/"/>
    <id>http://yoursite.com/2017/12/10/Vue2-Webpack2零开始上手/</id>
    <published>2017-12-10T13:38:22.000Z</published>
    <updated>2017-12-11T09:25:09.251Z</updated>
    
    <content type="html"><![CDATA[<h2 id="前端发展历程"><a href="#前端发展历程" class="headerlink" title="前端发展历程"></a>前端发展历程</h2><p><img src="/imgs/vue-02.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><h3 id="1-该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。"><a href="#1-该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。" class="headerlink" title="1.该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。"></a>1.该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。</h3><p><img src="/imgs/vue-03.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><a id="more"></a><h3 id="2-该阶段，html，css和js以静态文件数据存在，前端工程师就基本有活干，同时后端工程师也开始减负。"><a href="#2-该阶段，html，css和js以静态文件数据存在，前端工程师就基本有活干，同时后端工程师也开始减负。" class="headerlink" title="2.该阶段，html，css和js以静态文件数据存在，前端工程师就基本有活干，同时后端工程师也开始减负。"></a>2.该阶段，html，css和js以静态文件数据存在，前端工程师就基本有活干，同时后端工程师也开始减负。</h3><p><img src="/imgs/vue-04.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><h3 id="3-ajax的发明，让js担当更多的责任"><a href="#3-ajax的发明，让js担当更多的责任" class="headerlink" title="3: ajax的发明，让js担当更多的责任"></a>3: ajax的发明，让js担当更多的责任</h3><p>iv: js的模块化规范开始广泛讨论，有AMD，CMD两种，AMD以RequireJS领头，CMD以SeaJS领头（同时node的发明，js开始进入后端开发领域，以commonJS为规范）</p><p>简介<br>随着js的发展或互联网产品用户体验概念的深入，前端越来越受程序员及公司们关注。组件化的系统架构思想，本以往所有的系统架构思想都只会出现在后端，可当下，前端工作或系统越来越庞大，越显臃肿。而组件化中，首当其冲的是angularJS，reactJs和vue。而angularJS对我来说，它具备着很多后端开发的思想，带进了很多新概念，入门有点难度，所以，我不太建议；而reactJS稍微有了解，但是render部分似乎并没有vue做得简单，明了。所以，本文之后介绍vue2+webpack2的组件开发。</p><h2 id="VueJS"><a href="#VueJS" class="headerlink" title="VueJS"></a>VueJS</h2><p>VueJS是构建用户界面的js框架。简答使用，可以直接下载官方的vue.js库文件，类似jquery库一样，放到html中去，使用类似var vue=new Vue() 语法即可使用vue框架的特性，如双向绑定。单单双向绑定就很值得大家去尝试，极大提高前端的开发效率，甚至我对我以往html的拼接方式，jquery获取各个输入框值等这些做法不忍回首。<br>详情可见：<a href="https://cn.vuejs.org/v2/guide/" target="_blank" rel="noopener">介绍-Vue.js</a></p><h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><p>Webpack 是当下最热门的前端资源模块化管理和打包工具。它可以将许多松散的模块按照依赖和规则打包成符合生产环境部署的前端资源。还可以将按需加载的模块进行代码分隔，等到实际需要的时候再异步加载。通过 loader 的转换，任何形式的资源都可以视作模块，比如 CommonJs 模块、 AMD 模块、 ES6 模块、CSS、图片、 JSON、Coffeescript、 LESS 等。</p><p><img src="/imgs/webpack-01.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>上述图片也许不太容易理解，我根据目前自己的理解做了一张图解，如下：</p><p><img src="/imgs/webpack-02.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><p>我极力推荐Vue-cli脚手架方式来初始化项目，因为当你发现你上网找到的文章例子运行不了时候（可能vue或webpack版本不符或loaders没加载完全），那已经浪费不少时间。具体步骤可见：vue2 webpack2 脚手架 详解使用vue脚手架工具搭建vue-webpack项目</p><h2 id="Tips"><a href="#Tips" class="headerlink" title="Tips"></a>Tips</h2><div class="note danger"><p>eslint： 通过文章中的操作，已经可以运行vue2+webpack2的项目，但是如果修改里面某一行或增加一个简单v-on:click操作，似乎困难重重。我简单增加了一个操作，本以为会成功运行，但是没想到会出现类似编译错误问题。后来才发现，原来忽视了eslint，至于eslint是什么，大家可点击查看：ESLint入坑</p></div><h2 id="组件间通信"><a href="#组件间通信" class="headerlink" title="组件间通信"></a>组件间通信</h2><p>在整个前端系统来说，组件间通信肯定是必不可少的一部分。如搜索页面，顶部是搜索框的组件，下面是搜索到的内容列表组件；再如一个表格内容中，有针对某个条目进行删除，删除后表格头部更新条目数量。<br>在组件通信中，父组件-&gt;子组件通过属性参数进行传递，而子组件-&gt;父组件则通过事件冒泡进行通知。如下图：</p><p><img src="/imgs/vue-05.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><h3 id="父组件代码："><a href="#父组件代码：" class="headerlink" title="父组件代码："></a>父组件代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div class=<span class="string">"hello"</span>&gt;</span><br><span class="line">    &lt;h1&gt;&#123;&#123; msg &#125;&#125;&lt;/h1&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> v-model=<span class="string">"msg"</span> placeholder=<span class="string">"请输入信息"</span> /&gt;</span><br><span class="line">    &lt;h2 @click=<span class="string">"show"</span>&gt;Essential Links&lt;/h2&gt;</span><br><span class="line">    &lt;Child :msg=<span class="string">"msg"</span> @childmessage=<span class="string">"receiveMessage"</span>&gt;&lt;/Child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import Child from <span class="string">'./Child'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'hello'</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      msg: <span class="string">'Welcome to My Vue.js App'</span></span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">show</span></span>() &#123;</span><br><span class="line">      alert(this.msg);</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="function"><span class="title">receiveMessage</span></span>() &#123;</span><br><span class="line">      console.log(<span class="string">'我是父组件，我收到信息了'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  components: &#123;</span><br><span class="line">    Child: Child</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><h3 id="子组件代码："><a href="#子组件代码：" class="headerlink" title="子组件代码："></a>子组件代码：</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;ul&gt;</span><br><span class="line">      &lt;li v-for=<span class="string">"item in list"</span>&gt;&lt;a v-bind:href=<span class="string">"item.url"</span> target=<span class="string">"_blank"</span>&gt;&#123;&#123;item.name&#125;&#125;&lt;/a&gt;&lt;/li&gt;</span><br><span class="line">      &lt;li v-show=<span class="string">"msg"</span>&gt;&#123;&#123;msg&#125;&#125;&lt;/li&gt;</span><br><span class="line">      &lt;li @click=<span class="string">"send()"</span>&gt;发送消息给父组件&lt;/li&gt;</span><br><span class="line">    &lt;/ul&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">import data from <span class="string">'@/../static/data'</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">export</span> default &#123;</span><br><span class="line">  name: <span class="string">'child'</span>,</span><br><span class="line">  <span class="function"><span class="title">data</span></span>() &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      list: data.links</span><br><span class="line">    &#125;;</span><br><span class="line">  &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    <span class="function"><span class="title">send</span></span>() &#123;</span><br><span class="line">      this.<span class="variable">$emit</span>(<span class="string">'childmessage'</span>, <span class="string">'消息内容'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  props: &#123;</span><br><span class="line">    msg: String</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上解决了父组件-&gt;子组件的消息传递，子组件-&gt;父组件的事件传递</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;前端发展历程&quot;&gt;&lt;a href=&quot;#前端发展历程&quot; class=&quot;headerlink&quot; title=&quot;前端发展历程&quot;&gt;&lt;/a&gt;前端发展历程&lt;/h2&gt;&lt;p&gt;&lt;img src=&quot;/imgs/vue-02.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。&quot;&gt;&lt;a href=&quot;#1-该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。&quot; class=&quot;headerlink&quot; title=&quot;1.该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。&quot;&gt;&lt;/a&gt;1.该阶段，用户访问内容，全部由服务器渲染输出，在这阶段，前端工程师基本也就没什么事情，重要性跟后端工程师没法拼。&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;/imgs/vue-03.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="webpack" scheme="http://yoursite.com/tags/webpack/"/>
    
  </entry>
  
  <entry>
    <title>NPM一些常用命令</title>
    <link href="http://yoursite.com/2017/12/10/NPM%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/12/10/NPM一些常用命令/</id>
    <published>2017-12-10T13:17:01.000Z</published>
    <updated>2017-12-11T09:25:52.574Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于NPM"><a href="#关于NPM" class="headerlink" title="关于NPM"></a>关于NPM</h2><p>NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。<br>就目前而言，NPM 的官网[1]拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM[2]，与 NPM 相同，它会每隔 10 分钟就同步一次。</p><p>一些常用命令<br><div class="note danger"><p>npm -v: 查看 npm 安装的版本<br>npm init: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等<br>npm install <modulename>: 安装模块<br>npm install <modulename> -g: 安装全局模块<br>npm install <modulename>@1.0.0: 安装指定版本的模块<br>npm install <modulename> -save: 安装模块并添加到 package.json 依赖中</modulename></modulename></modulename></modulename></p><p>npm uninstall <modulename>: 卸载模块</modulename></p><p>npm cache clean: 清除缓存</p><p>npm help: 查看帮助命令</p><p>npm ls: 查看当前目录安装的依赖<br>npm ls -g: 查看全局目录安装的依赖<br>npm view <modulename>: 查看包的 package.json<br>npm view <modulename> dependencies: 查看包的依赖关系<br>npm view <modulename> repository.url: 查看包的源文件地址</modulename></modulename></modulename></p><p>npm update <modulename>: 更新模块</modulename></p><p>npm remove <modulename>: 移除模块</modulename></p></div></p><a id="more"></a><h2 id="题外话CNPM"><a href="#题外话CNPM" class="headerlink" title="题外话CNPM"></a>题外话CNPM</h2><p>有时候会出现NPM无法使用的情况，此时可以尝试使用 CNPM 解决此问题。</p><h2 id="淘宝NPM镜像"><a href="#淘宝NPM镜像" class="headerlink" title="淘宝NPM镜像"></a>淘宝NPM镜像</h2><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10 分钟一次以保证尽量与官方服务同步。</p><p>##使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>与NPM类似，将npm install &lt;…&gt;改为cpm install &lt;…&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于NPM&quot;&gt;&lt;a href=&quot;#关于NPM&quot; class=&quot;headerlink&quot; title=&quot;关于NPM&quot;&gt;&lt;/a&gt;关于NPM&lt;/h2&gt;&lt;p&gt;NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。&lt;br&gt;就目前而言，NPM 的官网[1]拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM[2]，与 NPM 相同，它会每隔 10 分钟就同步一次。&lt;/p&gt;
&lt;p&gt;一些常用命令&lt;br&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;npm -v: 查看 npm 安装的版本&lt;br&gt;npm init: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等&lt;br&gt;npm install &lt;modulename&gt;: 安装模块&lt;br&gt;npm install &lt;modulename&gt; -g: 安装全局模块&lt;br&gt;npm install &lt;modulename&gt;@1.0.0: 安装指定版本的模块&lt;br&gt;npm install &lt;modulename&gt; -save: 安装模块并添加到 package.json 依赖中&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm uninstall &lt;modulename&gt;: 卸载模块&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm cache clean: 清除缓存&lt;/p&gt;
&lt;p&gt;npm help: 查看帮助命令&lt;/p&gt;
&lt;p&gt;npm ls: 查看当前目录安装的依赖&lt;br&gt;npm ls -g: 查看全局目录安装的依赖&lt;br&gt;npm view &lt;modulename&gt;: 查看包的 package.json&lt;br&gt;npm view &lt;modulename&gt; dependencies: 查看包的依赖关系&lt;br&gt;npm view &lt;modulename&gt; repository.url: 查看包的源文件地址&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm update &lt;modulename&gt;: 更新模块&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm remove &lt;modulename&gt;: 移除模块&lt;/modulename&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>git添加远程库github</title>
    <link href="http://yoursite.com/2017/12/10/git%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E5%BA%93github/"/>
    <id>http://yoursite.com/2017/12/10/git添加远程库github/</id>
    <published>2017-12-10T12:22:32.000Z</published>
    <updated>2017-12-11T08:07:32.567Z</updated>
    
    <content type="html"><![CDATA[<p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p><p><img src="/imgs/git-02.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><a id="more"></a><p><img src="/imgs/git-03.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:yourname/learngit.git</span><br></pre></td></tr></table></figure><p>请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 19, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (19/19), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (19/19), 13.73 KiB, <span class="keyword">done</span>.</span><br><span class="line">Total 23 (delta 6), reused 0 (delta 0)</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p><img src="/imgs/git-03.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><p>当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (xx.xx.xx.xx)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。</p><p>小结</p><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/git-02.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：&lt;/p&gt;
    
    </summary>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用Git管理项目</title>
    <link href="http://yoursite.com/2017/12/10/git-project/"/>
    <id>http://yoursite.com/2017/12/10/git-project/</id>
    <published>2017-12-10T12:03:58.000Z</published>
    <updated>2017-12-11T09:14:53.020Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><p>提到版本控制，那么我会想到的是 SVN 以及这里要说的 Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h2 id="Git基础-三种状态"><a href="#Git基础-三种状态" class="headerlink" title="Git基础-三种状态"></a>Git基础-三种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p><p><img src="/imgs/git-01.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><a id="more"></a><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p><p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。</p><h3 id="基本的-Git-工作流程如下："><a href="#基本的-Git-工作流程如下：" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h3><p>1.在工作目录中修改文件。<br>2.暂存文件，将文件的快照放入暂存区域。<br>3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Mac: brew install git</p><p>Linux(Debian) : apt-get install git-core</p><p>Linux(Fedora) : yum install git-core</p><p>Windows : 下载安装 Git</p><p>配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"your name"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"youremail@email.com"</span></span><br></pre></td></tr></table></figure><p>使用 –global 可以使该命令只执行一次。</p><p>你可以通过如下的命令来查看你的配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">user.email=cangyuan@qq.com</span><br><span class="line">user.name=cangyuan</span><br><span class="line">color.status=auto</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>你可以通过输入 $ git config <key> 来查看某一项的配置</key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> git config user.name</span><br><span class="line">cangyuan</span><br></pre></td></tr></table></figure><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于版本控制&quot;&gt;&lt;a href=&quot;#关于版本控制&quot; class=&quot;headerlink&quot; title=&quot;关于版本控制&quot;&gt;&lt;/a&gt;关于版本控制&lt;/h2&gt;&lt;p&gt;提到版本控制，那么我会想到的是 SVN 以及这里要说的 Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。&lt;/p&gt;
&lt;h2 id=&quot;Git基础-三种状态&quot;&gt;&lt;a href=&quot;#Git基础-三种状态&quot; class=&quot;headerlink&quot; title=&quot;Git基础-三种状态&quot;&gt;&lt;/a&gt;Git基础-三种状态&lt;/h2&gt;&lt;p&gt;Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/git-01.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
      <category term="安装" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/%E5%AE%89%E8%A3%85/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>http详解</title>
    <link href="http://yoursite.com/2017/12/10/http%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/10/http详解/</id>
    <published>2017-12-09T17:00:58.000Z</published>
    <updated>2017-12-10T13:31:30.200Z</updated>
    
    <content type="html"><![CDATA[<p>web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据</p><p>客户端通过HTTP协议，向Server发送数据</p><p>主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）</p><p>HTTP message 格式有两种request和response</p><p>HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成</p><p>后继的几行是header line.</p><p>HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。</p><p>一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST</p><p>GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大</p><p>POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法</p><p>HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码</p><p>后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息</p><p>e.g. content-type：text/html 表示body中包含一个html 文件</p><a id="more"></a><p>一些常见的状态码：</p><p>200 OK :成功打开</p><p>301 Moved Permanently ：请求对象被永久移除</p><p>400 Bad Request ：错误的不能被服务器理解的请求</p><p>401 Not Found ： 请求的对象不在该服务器上</p><p>505 HTTP Version Not Supported ：服务器不支出当前请求message的HTTP版本</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据&lt;/p&gt;
&lt;p&gt;客户端通过HTTP协议，向Server发送数据&lt;/p&gt;
&lt;p&gt;主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）&lt;/p&gt;
&lt;p&gt;HTTP message 格式有两种request和response&lt;/p&gt;
&lt;p&gt;HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成&lt;/p&gt;
&lt;p&gt;后继的几行是header line.&lt;/p&gt;
&lt;p&gt;HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。&lt;/p&gt;
&lt;p&gt;一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST&lt;/p&gt;
&lt;p&gt;GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大&lt;/p&gt;
&lt;p&gt;POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法&lt;/p&gt;
&lt;p&gt;HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码&lt;/p&gt;
&lt;p&gt;后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息&lt;/p&gt;
&lt;p&gt;e.g. content-type：text/html 表示body中包含一个html 文件&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
      <category term="http" scheme="http://yoursite.com/categories/Web/http/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://yoursite.com/2017/12/09/hello-world/"/>
    <id>http://yoursite.com/2017/12/09/hello-world/</id>
    <published>2017-12-08T17:00:58.000Z</published>
    <updated>2017-12-10T15:04:42.873Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
  <entry>
    <title>Vue之实例详解与生命周期</title>
    <link href="http://yoursite.com/2017/12/08/vue-info/"/>
    <id>http://yoursite.com/2017/12/08/vue-info/</id>
    <published>2017-12-08T08:26:21.000Z</published>
    <updated>2017-12-11T09:26:26.933Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue实例初始化的选项配置对象详解"><a href="#1-Vue实例初始化的选项配置对象详解" class="headerlink" title="1.Vue实例初始化的选项配置对象详解"></a>1.Vue实例初始化的选项配置对象详解</h2><p>前面我们已经用了很多次 new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。</p><h3 id="1-1-Vue实例的的data对象"><a href="#1-1-Vue实例的的data对象" class="headerlink" title="1.1. Vue实例的的data对象"></a>1.1. Vue实例的的data对象</h3><p>Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。</p><h4 id="data对象的类型："><a href="#data对象的类型：" class="headerlink" title="data对象的类型："></a>data对象的类型：</h4><p>类型是Object或者Function。<br>如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建普通的Vue实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件定义【后面会详细讲的】</span><br><span class="line">// Vue.extend() 中 data 必须是函数</span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;   //这里必须是函数！！！！</span><br><span class="line">    <span class="built_in">return</span> &#123; a: 1 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2-Vue实例的computed"><a href="#1-2-Vue实例的computed" class="headerlink" title="1.2. Vue实例的computed"></a>1.2. Vue实例的computed</h3><p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，再计算属性中定义的函数里面可以直接使用指向了vue实例的this，异常方便的啊。</p><p>类型<br>{ 键：函数} { [key: string]: Function | { get: Function, set: Function } } 当然，可以省略setter,如果省略了setter，那么值就可以是普通函数，但是必须有返回值。</p><h4 id="官方的实例"><a href="#官方的实例" class="headerlink" title="官方的实例"></a>官方的实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">data: &#123; a: 1 &#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  // 仅读取，值只须为函数</span><br><span class="line">  aDouble: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> this.a * 2</span><br><span class="line">  &#125;,</span><br><span class="line">  // 读取和设置</span><br><span class="line">  aPlus: &#123;</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.a + 1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (v) &#123;</span><br><span class="line">      this.a = v - 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   // -&gt; 2</span><br><span class="line">vm.aPlus = 3</span><br><span class="line">vm.a       // -&gt; 2</span><br><span class="line">vm.aDouble // -&gt; 4</span><br></pre></td></tr></table></figure><h3 id="1-3-methods"><a href="#1-3-methods" class="headerlink" title="1.3. methods"></a>1.3. methods</h3><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p><p>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</p><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123; a: 1 &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      this.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a // 2</span><br></pre></td></tr></table></figure><h3 id="1-4-watch"><a href="#1-4-watch" class="headerlink" title="1.4. watch"></a>1.4. watch</h3><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: 3</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 监控a变量变化的时候，自动执行此函数</span><br><span class="line">    a: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">      console.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 深度 watcher</span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="keyword">function</span> (val, oldVal) &#123; /* ... */ &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = 2 // -&gt; new: 2, old: 1</span><br><span class="line">//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</span><br></pre></td></tr></table></figure><h4 id="参考综合案例："><a href="#参考综合案例：" class="headerlink" title="参考综合案例："></a>参考综合案例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Vue入门之数据监控&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> name=<span class="string">"btnGetNumber"</span> value=<span class="string">"增加"</span> v-on:click=<span class="string">"getNumber()"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;         </span><br><span class="line">      el: <span class="string">'#app'</span>,               </span><br><span class="line">      data: &#123;                   </span><br><span class="line">        number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        // 事件响应方法的逻辑代码</span><br><span class="line">        getNumber: <span class="keyword">function</span> (e) &#123;</span><br><span class="line">          this.number += 1;   // 不管是内联方法调用，还是绑定事件处理器两种方式执行事件响应方法的时候 this都是指向 app</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        // 监控number的变化，并自动执行下面的函数</span><br><span class="line">        number: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">          console.log(<span class="string">'val:'</span> + val + <span class="string">' - oldVal: '</span> + oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-设置el的详解"><a href="#1-5-设置el的详解" class="headerlink" title="1.5. 设置el的详解"></a>1.5. 设置el的详解</h3><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标,也就是说Vue绑定数据到哪里去找。可以是CSS 选择器，也可以是一个 HTMLElement实例。</p><p>在实例挂载之后(生命周期的内容后面会详细讲的奥)， 元素可以用 vm.$el 访问。</p><p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p><p>// 几乎所有例子都用到这个，所以就不再赘述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;         </span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-Vue实例的生命周期"><a href="#2-Vue实例的生命周期" class="headerlink" title="2. Vue实例的生命周期"></a>2. Vue实例的生命周期</h2><div class="note danger"><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，哇赛，如果你搞过Asp.Net WebForm的话，你会发现整个就是WebForm的翻版嘛哈哈。值得注意的是，在这些事件响应方法中的this直接指向的是vue的实例。</p></div><h4 id="官网的一张生命周期的图"><a href="#官网的一张生命周期的图" class="headerlink" title="官网的一张生命周期的图"></a>官网的一张生命周期的图</h4><p><img src="/imgs/vue-01.png" style="width: 100%;height: 100%" alt="vue-01" align="center"><br><!-- ![image](/imgs/vue-01.png) --></p><p>Vue提供的可以注册的钩子都在上图片的红色框标注。 他们是：</p><p>beforeCreate<br>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p><p>created<br>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p>beforeMount<br>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>mounted<br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p>beforeUpdate<br>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>updated<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p><p>该钩子在服务器端渲染期间不被调用。</p><p>beforeDestroy<br>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>destroyed<br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p><h4 id="接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。"><a href="#接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。" class="headerlink" title="接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。"></a>接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Vue入门之生命周期&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"btnSetNumber"</span> v-model=<span class="string">"number"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;         </span><br><span class="line">      el: <span class="string">'#app'</span>,               </span><br><span class="line">      data: &#123;                   </span><br><span class="line">        number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeCreate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeCreate 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      cteated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'cteated 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeMount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeMount 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'mounted 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeUpdate 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      updated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'updated 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeDestroy: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeDestroy 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      destroyed: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'destroyed 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="再看一个综合的实战的例子，可能涉及到ajax和组件"><a href="#再看一个综合的实战的例子，可能涉及到ajax和组件" class="headerlink" title="再看一个综合的实战的例子，可能涉及到ajax和组件"></a>再看一个综合的实战的例子，可能涉及到ajax和组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Axios from <span class="string">'axios'</span>       // 这是一个轻量级的ajax库，import是es6模块导入的语法。</span><br><span class="line"><span class="built_in">export</span> default &#123;                // 这是一个vue的模块，后面讲奥。</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="title">function</span></span> () &#123;          // 挂在完成后的生命周期钩子注册。</span><br><span class="line">    this.<span class="variable">$nextTick</span>(<span class="function"><span class="title">function</span></span> () &#123;  // 等待下一次更新完成后执行业务处理代码。</span><br><span class="line">      Axios.get(<span class="string">'/api/menulist'</span>, &#123;// 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span><br><span class="line">        params: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (res) &#123;</span><br><span class="line">        this.list = res.data</span><br><span class="line">      &#125;.<span class="built_in">bind</span>(this))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Vue实例的全局配置"><a href="#3-Vue实例的全局配置" class="headerlink" title="3. Vue实例的全局配置"></a>3. Vue实例的全局配置</h2><p> Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性：</p><p>silent</p><p>类型： boolean</p><p>默认值： false</p><p>用法：</p><p>Vue.config.silent = true<br>//取消 Vue 所有的日志与警告。<br>optionMergeStrategies</p><p>类型： { [key: string]: Function }</p><p>默认值： {}</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option = <span class="keyword">function</span> (parent, child, vm) &#123;</span><br><span class="line"><span class="built_in">return</span> child + 1</span><br><span class="line">&#125;</span><br><span class="line">const Profile = Vue.extend(&#123;</span><br><span class="line">_my_option: 1</span><br><span class="line">&#125;)</span><br><span class="line">// Profile.options._my_option = 2</span><br><span class="line">//自定义合并策略的选项。</span><br><span class="line">//合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入</span><br></pre></td></tr></table></figure><p>devtools</p><p>类型： boolean</p><p>默认值： true (生产版为 false)</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 务必在加载 Vue 之后，立即同步设置以下内容</span><br><span class="line">Vue.config.devtools = <span class="literal">true</span></span><br><span class="line">//配置是否允许 vue-devtools 检查代码。开发版本默认为 <span class="literal">true</span>，生产版本默认为 <span class="literal">false</span>。生产版本设为 <span class="literal">true</span> 可以启用检查。</span><br><span class="line">errorHandler</span><br></pre></td></tr></table></figure><p>类型： Function</p><p>默认值： 默认抛出错误</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="keyword">function</span> (err, vm) &#123;</span><br><span class="line">// handle error</span><br><span class="line">&#125;</span><br><span class="line">//指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</span><br><span class="line">//Sentry, an error tracking service, provides official integration using this option.</span><br><span class="line">ignoredElements</span><br></pre></td></tr></table></figure><p>类型: Array</p><p>默认值: []</p><p>用法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [</span><br><span class="line"><span class="string">'my-custom-web-component'</span>, <span class="string">'another-web-component'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>须使 Vue 忽略在 Vue 之外的自定义元素 (e.g., 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。<br>keyCodes</p><p>类型： { [key: string]: number | Array }</p><p>默认值： {}</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">v: 86,</span><br><span class="line">f1: 112,</span><br><span class="line">mediaPlayPause: 179,</span><br><span class="line">up: [38, 87]</span><br><span class="line">&#125;api</span><br><span class="line">//给 v-on 自定义键位别名。</span><br></pre></td></tr></table></figure><h2 id="4-Vue的全局API"><a href="#4-Vue的全局API" class="headerlink" title="4. Vue的全局API"></a>4. Vue的全局API</h2><h3 id="4-1-Vue-nextTick"><a href="#4-1-Vue-nextTick" class="headerlink" title="4.1. Vue.nextTick"></a>4.1. Vue.nextTick</h3><p>语法： Vue.nextTick( [callback, context] )</p><p>参数：<br>{Function} [callback]<br>{Object} [context]<br>用法： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>// 修改数据<br>vm.msg = ‘Hello’<br>// DOM 还没有更新<br>Vue.nextTick(function () {<br>  // DOM 更新了<br>})</p><h3 id="4-2-Vue-set"><a href="#4-2-Vue-set" class="headerlink" title="4.2. Vue.set"></a>4.2. Vue.set</h3><p>语法： Vue.set( object, key, value )</p><p>参数：<br>{Object} object<br>{string} key<br>{any} value<br>返回值： 设置的值.<br>用法：<br>设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。 注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p><h3 id="4-3-Vue-compile"><a href="#4-3-Vue-compile" class="headerlink" title="4.3. Vue.compile"></a>4.3. Vue.compile</h3><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.compile( template )</span><br></pre></td></tr></table></figure></p><p>参数：<br>{string} template</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//在render函数中编译模板字符串。只在独立构建时有效</span><br><span class="line">var res = Vue.compile(<span class="string">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: res.render,</span><br><span class="line">  staticRenderFns: res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-4-全局API总结"><a href="#4-4-全局API总结" class="headerlink" title="4.4. 全局API总结"></a>4.4. 全局API总结</h3><p>其实还有几个其他的全局API，不打算在这里讲了，比如扩展组件Vue.extend 的用法、Vue.use加载插件、Vue.filter加载过滤器、Vue.directive自定义指令等 后面再讲其他Vue的知识点的时候，再加上这些，全局API其实就是Vue类型的静态方法，全局范围内都可以使用的，某些实例的方法本质也是调用了这些全局的，后面用到时候再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Vue实例初始化的选项配置对象详解&quot;&gt;&lt;a href=&quot;#1-Vue实例初始化的选项配置对象详解&quot; class=&quot;headerlink&quot; title=&quot;1.Vue实例初始化的选项配置对象详解&quot;&gt;&lt;/a&gt;1.Vue实例初始化的选项配置对象详解&lt;/h2&gt;&lt;p&gt;前面我们已经用了很多次 new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。&lt;/p&gt;
&lt;h3 id=&quot;1-1-Vue实例的的data对象&quot;&gt;&lt;a href=&quot;#1-1-Vue实例的的data对象&quot; class=&quot;headerlink&quot; title=&quot;1.1. Vue实例的的data对象&quot;&gt;&lt;/a&gt;1.1. Vue实例的的data对象&lt;/h3&gt;&lt;p&gt;Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。&lt;/p&gt;
&lt;h4 id=&quot;data对象的类型：&quot;&gt;&lt;a href=&quot;#data对象的类型：&quot; class=&quot;headerlink&quot; title=&quot;data对象的类型：&quot;&gt;&lt;/a&gt;data对象的类型：&lt;/h4&gt;&lt;p&gt;类型是Object或者Function。&lt;br&gt;如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】&lt;/p&gt;
&lt;h4 id=&quot;实例：&quot;&gt;&lt;a href=&quot;#实例：&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 创建普通的Vue实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var vm = new Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 组件定义【后面会详细讲的】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Vue.extend() 中 data 必须是函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var Component = Vue.extend(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;   //这里必须是函数！！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123; a: 1 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Vue" scheme="http://yoursite.com/categories/Vue/"/>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
  </entry>
  
</feed>
