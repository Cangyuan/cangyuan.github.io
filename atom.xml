<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orca&#39;s Notes</title>
  
  <subtitle>逆戟 · 个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-10T13:21:40.484Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ORCA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>NPM一些常用命令</title>
    <link href="http://yoursite.com/2017/12/10/NPM%E4%B8%80%E4%BA%9B%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>http://yoursite.com/2017/12/10/NPM一些常用命令/</id>
    <published>2017-12-10T13:17:01.000Z</published>
    <updated>2017-12-10T13:21:40.484Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于NPM"><a href="#关于NPM" class="headerlink" title="关于NPM"></a>关于NPM</h2><p>NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。<br>就目前而言，NPM 的官网[1]拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM[2]，与 NPM 相同，它会每隔 10 分钟就同步一次。</p><p>一些常用命令<br><div class="note danger"><p>npm -v: 查看 npm 安装的版本<br>npm init: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等<br>npm install <modulename>: 安装模块<br>npm install <modulename> -g: 安装全局模块<br>npm install <modulename>@1.0.0: 安装指定版本的模块<br>npm install <modulename> -save: 安装模块并添加到 package.json 依赖中</modulename></modulename></modulename></modulename></p><p>npm uninstall <modulename>: 卸载模块</modulename></p><p>npm cache clean: 清除缓存</p><p>npm help: 查看帮助命令</p><p>npm ls: 查看当前目录安装的依赖<br>npm ls -g: 查看全局目录安装的依赖<br>npm view <modulename>: 查看包的 package.json<br>npm view <modulename> dependencies: 查看包的依赖关系<br>npm view <modulename> repository.url: 查看包的源文件地址</modulename></modulename></modulename></p><p>npm update <modulename>: 更新模块</modulename></p><p>npm remove <modulename>: 移除模块</modulename></p></div></p><a id="more"></a><h2 id="题外话CNPM"><a href="#题外话CNPM" class="headerlink" title="题外话CNPM"></a>题外话CNPM</h2><p>有时候会出现NPM无法使用的情况，此时可以尝试使用 CNPM 解决此问题。</p><h2 id="淘宝NPM镜像"><a href="#淘宝NPM镜像" class="headerlink" title="淘宝NPM镜像"></a>淘宝NPM镜像</h2><p>这是一个完整 npmjs.org 镜像，你可以用此代替官方版本(只读)，同步频率目前为 10 分钟一次以保证尽量与官方服务同步。</p><p>##使用</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g cnpm --registry=https://registry.npm.taobao.org</span><br></pre></td></tr></table></figure><h2 id="安装模块"><a href="#安装模块" class="headerlink" title="安装模块"></a>安装模块</h2><p>与NPM类似，将npm install &lt;…&gt;改为cpm install &lt;…&gt;</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于NPM&quot;&gt;&lt;a href=&quot;#关于NPM&quot; class=&quot;headerlink&quot; title=&quot;关于NPM&quot;&gt;&lt;/a&gt;关于NPM&lt;/h2&gt;&lt;p&gt;NPM 的全称是 Node Package Manager，是一个 NodeJS 包管理和分发工具，已经成为了非官方的发布 Node 模块（包）的标准。&lt;br&gt;就目前而言，NPM 的官网[1]拥有 18 万的 packages。国内的镜像是淘宝所提供的 CNPM[2]，与 NPM 相同，它会每隔 10 分钟就同步一次。&lt;/p&gt;
&lt;p&gt;一些常用命令&lt;br&gt;&lt;div class=&quot;note danger&quot;&gt;&lt;p&gt;npm -v: 查看 npm 安装的版本&lt;br&gt;npm init: 引导你创建一个 package.json 文件，包括名称、版本、作者这些信息等&lt;br&gt;npm install &lt;modulename&gt;: 安装模块&lt;br&gt;npm install &lt;modulename&gt; -g: 安装全局模块&lt;br&gt;npm install &lt;modulename&gt;@1.0.0: 安装指定版本的模块&lt;br&gt;npm install &lt;modulename&gt; -save: 安装模块并添加到 package.json 依赖中&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm uninstall &lt;modulename&gt;: 卸载模块&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm cache clean: 清除缓存&lt;/p&gt;
&lt;p&gt;npm help: 查看帮助命令&lt;/p&gt;
&lt;p&gt;npm ls: 查看当前目录安装的依赖&lt;br&gt;npm ls -g: 查看全局目录安装的依赖&lt;br&gt;npm view &lt;modulename&gt;: 查看包的 package.json&lt;br&gt;npm view &lt;modulename&gt; dependencies: 查看包的依赖关系&lt;br&gt;npm view &lt;modulename&gt; repository.url: 查看包的源文件地址&lt;/modulename&gt;&lt;/modulename&gt;&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm update &lt;modulename&gt;: 更新模块&lt;/modulename&gt;&lt;/p&gt;
&lt;p&gt;npm remove &lt;modulename&gt;: 移除模块&lt;/modulename&gt;&lt;/p&gt;&lt;/div&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="nodeJs" scheme="http://yoursite.com/categories/nodeJs/"/>
    
      <category term="npm" scheme="http://yoursite.com/categories/nodeJs/npm/"/>
    
    
      <category term="node" scheme="http://yoursite.com/tags/node/"/>
    
      <category term="npm" scheme="http://yoursite.com/tags/npm/"/>
    
  </entry>
  
  <entry>
    <title>git添加远程库github</title>
    <link href="http://yoursite.com/2017/12/10/git%E6%B7%BB%E5%8A%A0%E8%BF%9C%E7%A8%8B%E5%BA%93github/"/>
    <id>http://yoursite.com/2017/12/10/git添加远程库github/</id>
    <published>2017-12-10T12:22:32.000Z</published>
    <updated>2017-12-10T12:42:53.166Z</updated>
    
    <content type="html"><![CDATA[<p>首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：</p><p><img src="/imgs/git-02.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：</p><p><img src="/imgs/git-03.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。</p><p>现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git remote add origin git@github.com:yourname/learngit.git</span><br></pre></td></tr></table></figure><p>请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。</p><p>添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。</p><p>下一步，就可以把本地库的所有内容推送到远程库上：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ git push -u origin master</span><br><span class="line">Counting objects: 19, <span class="keyword">done</span>.</span><br><span class="line">Delta compression using up to 4 threads.</span><br><span class="line">Compressing objects: 100% (19/19), <span class="keyword">done</span>.</span><br><span class="line">Writing objects: 100% (19/19), 13.73 KiB, <span class="keyword">done</span>.</span><br><span class="line">Total 23 (delta 6), reused 0 (delta 0)</span><br><span class="line">To git@github.com:michaelliao/learngit.git</span><br><span class="line"> * [new branch]      master -&gt; master</span><br><span class="line">Branch master <span class="built_in">set</span> up to track remote branch master from origin.</span><br></pre></td></tr></table></figure><a id="more"></a><p>把本地库的内容推送到远程，用git push命令，实际上是把当前分支master推送到远程。</p><p>由于远程库是空的，我们第一次推送master分支时，加上了-u参数，Git不但会把本地的master分支内容推送的远程新的master分支，还会把本地的master分支和远程的master分支关联起来，在以后的推送或者拉取时就可以简化命令。</p><p>推送成功后，可以立刻在GitHub页面中看到远程库的内容已经和本地一模一样：</p><p><img src="/imgs/git-03.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>从现在起，只要本地作了提交，就可以通过命令：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git push origin master</span><br></pre></td></tr></table></figure><p>把本地master分支的最新修改推送至GitHub，现在，你就拥有了真正的分布式版本库！</p><h2 id="SSH警告"><a href="#SSH警告" class="headerlink" title="SSH警告"></a>SSH警告</h2><p>当你第一次使用Git的clone或者push命令连接GitHub时，会得到一个警告：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host <span class="string">'github.com (xx.xx.xx.xx)'</span> can<span class="string">'t be established.</span></span><br><span class="line"><span class="string">RSA key fingerprint is xx.xx.xx.xx.xx.</span></span><br><span class="line"><span class="string">Are you sure you want to continue connecting (yes/no)?</span></span><br></pre></td></tr></table></figure><p>这是因为Git使用SSH连接，而SSH连接在第一次验证GitHub服务器的Key时，需要你确认GitHub的Key的指纹信息是否真的来自GitHub的服务器，输入yes回车即可。</p><p>Git会输出一个警告，告诉你已经把GitHub的Key添加到本机的一个信任列表里了：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Warning: Permanently added <span class="string">'github.com'</span> (RSA) to the list of known hosts.</span><br></pre></td></tr></table></figure><p>这个警告只会出现一次，后面的操作就不会有任何警告了。</p><p>如果你实在担心有人冒充GitHub服务器，输入yes前可以对照GitHub的RSA Key的指纹信息是否与SSH连接给出的一致。</p><p>小结</p><p>要关联一个远程库，使用命令git remote add origin git@server-name:path/repo-name.git；</p><p>关联后，使用命令git push -u origin master第一次推送master分支的所有内容；</p><p>此后，每次本地提交后，只要有必要，就可以使用命令git push origin master推送最新修改；</p><p>分布式版本系统的最大好处之一是在本地工作完全不需要考虑远程库的存在，也就是有没有联网都可以正常工作，而SVN在没有联网的时候是拒绝干活的！当有网络的时候，再把本地提交推送一下就完成了同步</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;首先，登陆GitHub，然后，在右上角找到“Create a new repo”按钮，创建一个新的仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/git-02.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;在Repository name填入learngit，其他保持默认设置，点击“Create repository”按钮，就成功地创建了一个新的Git仓库：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/git-03.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;目前，在GitHub上的这个learngit仓库还是空的，GitHub告诉我们，可以从这个仓库克隆出新的仓库，也可以把一个已有的本地仓库与之关联，然后，把本地仓库的内容推送到GitHub仓库。&lt;/p&gt;
&lt;p&gt;现在，我们根据GitHub的提示，在本地的learngit仓库下运行命令：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git remote add origin git@github.com:yourname/learngit.git&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;请千万注意，把上面的michaelliao替换成你自己的GitHub账户名，否则，你在本地关联的就是我的远程库，关联没有问题，但是你以后推送是推不上去的，因为你的SSH Key公钥不在我的账户列表中。&lt;/p&gt;
&lt;p&gt;添加后，远程库的名字就是origin，这是Git默认的叫法，也可以改成别的，但是origin这个名字一看就知道是远程库。&lt;/p&gt;
&lt;p&gt;下一步，就可以把本地库的所有内容推送到远程库上：&lt;/p&gt;
&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$ git push -u origin master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Counting objects: 19, &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Delta compression using up to 4 threads.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Compressing objects: 100% (19/19), &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Writing objects: 100% (19/19), 13.73 KiB, &lt;span class=&quot;keyword&quot;&gt;done&lt;/span&gt;.&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Total 23 (delta 6), reused 0 (delta 0)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;To git@github.com:michaelliao/learngit.git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt; * [new branch]      master -&amp;gt; master&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;Branch master &lt;span class=&quot;built_in&quot;&gt;set&lt;/span&gt; up to track remote branch master from origin.&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>使用Git管理项目</title>
    <link href="http://yoursite.com/2017/12/10/git-project/"/>
    <id>http://yoursite.com/2017/12/10/git-project/</id>
    <published>2017-12-10T12:03:58.000Z</published>
    <updated>2017-12-10T12:39:02.901Z</updated>
    
    <content type="html"><![CDATA[<h2 id="关于版本控制"><a href="#关于版本控制" class="headerlink" title="关于版本控制"></a>关于版本控制</h2><p>提到版本控制，那么我会想到的是 SVN 以及这里要说的 Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。</p><h2 id="Git基础-三种状态"><a href="#Git基础-三种状态" class="headerlink" title="Git基础-三种状态"></a>Git基础-三种状态</h2><p>Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。</p><p><img src="/imgs/git-01.png" style="width: 100%;height: 100%" alt="git-01" align="center"></p><p>Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。</p><p>工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。</p><p>暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。</p><a id="more"></a><h3 id="基本的-Git-工作流程如下："><a href="#基本的-Git-工作流程如下：" class="headerlink" title="基本的 Git 工作流程如下："></a>基本的 Git 工作流程如下：</h3><p>1.在工作目录中修改文件。<br>2.暂存文件，将文件的快照放入暂存区域。<br>3.提交更新，找到暂存区域的文件，将快照永久性存储到 Git 仓库目录。</p><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>Mac: brew install git</p><p>Linux(Debian) : apt-get install git-core</p><p>Linux(Fedora) : yum install git-core</p><p>Windows : 下载安装 Git</p><p>配置:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.name <span class="string">"your name"</span></span><br></pre></td></tr></table></figure><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ git config --global user.email <span class="string">"youremail@email.com"</span></span><br></pre></td></tr></table></figure><p>使用 –global 可以使该命令只执行一次。</p><p>你可以通过如下的命令来查看你的配置信息：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ git config --list</span><br><span class="line">user.email=cangyuan@qq.com</span><br><span class="line">user.name=cangyuan</span><br><span class="line">color.status=auto</span><br><span class="line">...</span><br></pre></td></tr></table></figure><p>你可以通过输入 $ git config <key> 来查看某一项的配置</key></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"> git config user.name</span><br><span class="line">cangyuan</span><br></pre></td></tr></table></figure><h2 id="获取帮助"><a href="#获取帮助" class="headerlink" title="获取帮助"></a>获取帮助</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git <span class="built_in">help</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;关于版本控制&quot;&gt;&lt;a href=&quot;#关于版本控制&quot; class=&quot;headerlink&quot; title=&quot;关于版本控制&quot;&gt;&lt;/a&gt;关于版本控制&lt;/h2&gt;&lt;p&gt;提到版本控制，那么我会想到的是 SVN 以及这里要说的 Git。那什么是版本控制呢？版本控制是一种记录一个或若干文件内容变化，以便将来查阅特定版本修订情况的系统。&lt;/p&gt;
&lt;h2 id=&quot;Git基础-三种状态&quot;&gt;&lt;a href=&quot;#Git基础-三种状态&quot; class=&quot;headerlink&quot; title=&quot;Git基础-三种状态&quot;&gt;&lt;/a&gt;Git基础-三种状态&lt;/h2&gt;&lt;p&gt;Git 有三种状态，你的文件可能处于其中之一：已提交（committed）、已修改（modified）和已暂存（staged）。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;/imgs/git-01.png&quot; style=&quot;width: 100%;height: 100%&quot; alt=&quot;git-01&quot; align=&quot;center&quot;&gt;&lt;/p&gt;
&lt;p&gt;Git 仓库目录是 Git 用来保存项目的元数据和对象数据库的地方。 这是 Git 中最重要的部分，从其它计算机克隆仓库时，拷贝的就是这里的数据。&lt;/p&gt;
&lt;p&gt;工作目录是对项目的某个版本独立提取出来的内容。 这些从 Git 仓库的压缩数据库中提取出来的文件，放在磁盘上供你使用或修改。&lt;/p&gt;
&lt;p&gt;暂存区域是一个文件，保存了下次将提交的文件列表信息，一般在 Git 仓库目录中。 有时候也被称作“索引”，不过一般说法还是叫暂存区域。&lt;/p&gt;
    
    </summary>
    
      <category term="版本管理" scheme="http://yoursite.com/categories/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
      <category term="版本管理" scheme="http://yoursite.com/tags/%E7%89%88%E6%9C%AC%E7%AE%A1%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>http详解</title>
    <link href="http://yoursite.com/2017/12/10/http%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/10/http详解/</id>
    <published>2017-12-09T17:00:58.000Z</published>
    <updated>2017-12-10T11:11:54.585Z</updated>
    
    <content type="html"><![CDATA[<p>web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据</p><p>客户端通过HTTP协议，向Server发送数据</p><p>主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）</p><p>HTTP message 格式有两种request和response</p><p>HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成</p><p>后继的几行是header line.</p><p>HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。</p><p>一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST</p><p>GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大</p><p>POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法</p><p>HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码</p><p>后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息</p><p>e.g. content-type：text/html 表示body中包含一个html 文件</p><a id="more"></a><p>一些常见的状态码：</p><p>200 OK :成功打开</p><p>301 Moved Permanently ：请求对象被永久移除</p><p>400 Bad Request ：错误的不能被服务器理解的请求</p><p>401 Not Found ： 请求的对象不在该服务器上</p><p>505 HTTP Version Not Supported ：服务器不支出当前请求message的HTTP版本</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据&lt;/p&gt;
&lt;p&gt;客户端通过HTTP协议，向Server发送数据&lt;/p&gt;
&lt;p&gt;主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）&lt;/p&gt;
&lt;p&gt;HTTP message 格式有两种request和response&lt;/p&gt;
&lt;p&gt;HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成&lt;/p&gt;
&lt;p&gt;后继的几行是header line.&lt;/p&gt;
&lt;p&gt;HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。&lt;/p&gt;
&lt;p&gt;一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST&lt;/p&gt;
&lt;p&gt;GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大&lt;/p&gt;
&lt;p&gt;POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法&lt;/p&gt;
&lt;p&gt;HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码&lt;/p&gt;
&lt;p&gt;后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息&lt;/p&gt;
&lt;p&gt;e.g. content-type：text/html 表示body中包含一个html 文件&lt;/p&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/Web/vue/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Vue之实例详解与生命周期</title>
    <link href="http://yoursite.com/2017/12/08/vue-info/"/>
    <id>http://yoursite.com/2017/12/08/vue-info/</id>
    <published>2017-12-08T08:26:21.000Z</published>
    <updated>2017-12-10T13:21:20.287Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue实例初始化的选项配置对象详解"><a href="#1-Vue实例初始化的选项配置对象详解" class="headerlink" title="1.Vue实例初始化的选项配置对象详解"></a>1.Vue实例初始化的选项配置对象详解</h2><p>前面我们已经用了很多次 new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。</p><h3 id="1-1-Vue实例的的data对象"><a href="#1-1-Vue实例的的data对象" class="headerlink" title="1.1. Vue实例的的data对象"></a>1.1. Vue实例的的data对象</h3><p>Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。</p><h4 id="data对象的类型："><a href="#data对象的类型：" class="headerlink" title="data对象的类型："></a>data对象的类型：</h4><p>类型是Object或者Function。<br>如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建普通的Vue实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件定义【后面会详细讲的】</span><br><span class="line">// Vue.extend() 中 data 必须是函数</span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;   //这里必须是函数！！！！</span><br><span class="line">    <span class="built_in">return</span> &#123; a: 1 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><h3 id="1-2-Vue实例的computed"><a href="#1-2-Vue实例的computed" class="headerlink" title="1.2. Vue实例的computed"></a>1.2. Vue实例的computed</h3><p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，再计算属性中定义的函数里面可以直接使用指向了vue实例的this，异常方便的啊。</p><p>类型<br>{ 键：函数} { [key: string]: Function | { get: Function, set: Function } } 当然，可以省略setter,如果省略了setter，那么值就可以是普通函数，但是必须有返回值。</p><h4 id="官方的实例"><a href="#官方的实例" class="headerlink" title="官方的实例"></a>官方的实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">data: &#123; a: 1 &#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  // 仅读取，值只须为函数</span><br><span class="line">  aDouble: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> this.a * 2</span><br><span class="line">  &#125;,</span><br><span class="line">  // 读取和设置</span><br><span class="line">  aPlus: &#123;</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.a + 1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (v) &#123;</span><br><span class="line">      this.a = v - 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   // -&gt; 2</span><br><span class="line">vm.aPlus = 3</span><br><span class="line">vm.a       // -&gt; 2</span><br><span class="line">vm.aDouble // -&gt; 4</span><br></pre></td></tr></table></figure><h3 id="1-3-methods"><a href="#1-3-methods" class="headerlink" title="1.3. methods"></a>1.3. methods</h3><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p><p>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</p><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123; a: 1 &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      this.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a // 2</span><br></pre></td></tr></table></figure><h3 id="1-4-watch"><a href="#1-4-watch" class="headerlink" title="1.4. watch"></a>1.4. watch</h3><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: 3</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 监控a变量变化的时候，自动执行此函数</span><br><span class="line">    a: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">      console.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 深度 watcher</span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="keyword">function</span> (val, oldVal) &#123; /* ... */ &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = 2 // -&gt; new: 2, old: 1</span><br><span class="line">//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</span><br></pre></td></tr></table></figure><h4 id="参考综合案例："><a href="#参考综合案例：" class="headerlink" title="参考综合案例："></a>参考综合案例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Vue入门之数据监控&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> name=<span class="string">"btnGetNumber"</span> value=<span class="string">"增加"</span> v-on:click=<span class="string">"getNumber()"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;         </span><br><span class="line">      el: <span class="string">'#app'</span>,               </span><br><span class="line">      data: &#123;                   </span><br><span class="line">        number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        // 事件响应方法的逻辑代码</span><br><span class="line">        getNumber: <span class="keyword">function</span> (e) &#123;</span><br><span class="line">          this.number += 1;   // 不管是内联方法调用，还是绑定事件处理器两种方式执行事件响应方法的时候 this都是指向 app</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        // 监控number的变化，并自动执行下面的函数</span><br><span class="line">        number: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">          console.log(<span class="string">'val:'</span> + val + <span class="string">' - oldVal: '</span> + oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h3 id="1-5-设置el的详解"><a href="#1-5-设置el的详解" class="headerlink" title="1.5. 设置el的详解"></a>1.5. 设置el的详解</h3><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标,也就是说Vue绑定数据到哪里去找。可以是CSS 选择器，也可以是一个 HTMLElement实例。</p><p>在实例挂载之后(生命周期的内容后面会详细讲的奥)， 元素可以用 vm.$el 访问。</p><p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p><p>// 几乎所有例子都用到这个，所以就不再赘述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;         </span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><h2 id="2-Vue实例的生命周期"><a href="#2-Vue实例的生命周期" class="headerlink" title="2. Vue实例的生命周期"></a>2. Vue实例的生命周期</h2><div class="note danger"><p>Vue实例有一个完整的生命周期，也就是从开始创建、初始化数据、编译模板、挂载Dom、渲染→更新→渲染、卸载等一系列过程，我们称这是Vue的生命周期。通俗说就是Vue实例从创建到销毁的过程，就是生命周期。</p><p>在Vue的整个生命周期中，它提供了一系列的事件，可以让我们注册js方法，可以让我们达到控制整个过程的目的地，哇赛，如果你搞过Asp.Net WebForm的话，你会发现整个就是WebForm的翻版嘛哈哈。值得注意的是，在这些事件响应方法中的this直接指向的是vue的实例。</p></div><h4 id="官网的一张生命周期的图"><a href="#官网的一张生命周期的图" class="headerlink" title="官网的一张生命周期的图"></a>官网的一张生命周期的图</h4><p><img src="/imgs/vue-01.png" style="width: 100%;height: 100%" alt="vue-01" align="center"><br><!-- ![image](/imgs/vue-01.png) --></p><p>Vue提供的可以注册的钩子都在上图片的红色框标注。 他们是：</p><p>beforeCreate<br>在实例初始化之后，数据观测(data observer) 和 event/watcher 事件配置之前被调用。</p><p>created<br>实例已经创建完成之后被调用。在这一步，实例已完成以下的配置：数据观测(data observer)，属性和方法的运算， watch/event 事件回调。然而，挂载阶段还没开始，$el 属性目前不可见。</p><p>beforeMount<br>在挂载开始之前被调用：相关的 render 函数首次被调用。</p><p>mounted<br>el 被新创建的 vm.$el 替换，并挂载到实例上去之后调用该钩子。如果 root 实例挂载了一个文档内元素，当 mounted 被调用时 vm.$el 也在文档内。</p><p>beforeUpdate<br>数据更新时调用，发生在虚拟 DOM 重新渲染和打补丁之前。 你可以在这个钩子中进一步地更改状态，这不会触发附加的重渲染过程。</p><p>updated<br>由于数据更改导致的虚拟 DOM 重新渲染和打补丁，在这之后会调用该钩子。</p><p>当这个钩子被调用时，组件 DOM 已经更新，所以你现在可以执行依赖于 DOM 的操作。然而在大多数情况下，你应该避免在此期间更改状态，因为这可能会导致更新无限循环。</p><p>该钩子在服务器端渲染期间不被调用。</p><p>beforeDestroy<br>实例销毁之前调用。在这一步，实例仍然完全可用。</p><p>destroyed<br>Vue 实例销毁后调用。调用后，Vue 实例指示的所有东西都会解绑定，所有的事件监听器会被移除，所有的子实例也会被销毁。 该钩子在服务器端渲染期间不被调用。</p><h4 id="接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。"><a href="#接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。" class="headerlink" title="接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。"></a>接下来我们做一个例子，看一下Vue中所有的生命周期怎么用的。</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Vue入门之生命周期&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"text"</span> name=<span class="string">"btnSetNumber"</span> v-model=<span class="string">"number"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;         </span><br><span class="line">      el: <span class="string">'#app'</span>,               </span><br><span class="line">      data: &#123;                   </span><br><span class="line">        number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeCreate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeCreate 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      cteated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'cteated 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeMount: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeMount 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      mounted: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'mounted 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeUpdate: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeUpdate 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      updated: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'updated 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      beforeDestroy: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'beforeDestroy 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">      destroyed: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">        console.log(<span class="string">'destroyed 钩子执行...'</span>);</span><br><span class="line">        console.log(this.number)</span><br><span class="line">      &#125;,</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="再看一个综合的实战的例子，可能涉及到ajax和组件"><a href="#再看一个综合的实战的例子，可能涉及到ajax和组件" class="headerlink" title="再看一个综合的实战的例子，可能涉及到ajax和组件"></a>再看一个综合的实战的例子，可能涉及到ajax和组件</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">import Axios from <span class="string">'axios'</span>       // 这是一个轻量级的ajax库，import是es6模块导入的语法。</span><br><span class="line"><span class="built_in">export</span> default &#123;                // 这是一个vue的模块，后面讲奥。</span><br><span class="line">  name: <span class="string">'app'</span>,</span><br><span class="line">  components: &#123;</span><br><span class="line">  &#125;,</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> &#123;</span><br><span class="line">      list: []</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  mounted: <span class="function"><span class="title">function</span></span> () &#123;          // 挂在完成后的生命周期钩子注册。</span><br><span class="line">    this.<span class="variable">$nextTick</span>(<span class="function"><span class="title">function</span></span> () &#123;  // 等待下一次更新完成后执行业务处理代码。</span><br><span class="line">      Axios.get(<span class="string">'/api/menulist'</span>, &#123;// 将回调延迟到下次 DOM 更新循环之后执行。在修改数据之后立即使用它，然后等待 DOM 更新</span><br><span class="line">        params: &#123;</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;).<span class="keyword">then</span>(<span class="keyword">function</span> (res) &#123;</span><br><span class="line">        this.list = res.data</span><br><span class="line">      &#125;.<span class="built_in">bind</span>(this))</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="3-Vue实例的全局配置"><a href="#3-Vue实例的全局配置" class="headerlink" title="3. Vue实例的全局配置"></a>3. Vue实例的全局配置</h2><p> Vue.config 是一个对象，包含 Vue 的全局配置。可以在启动应用之前修改下列属性：</p><p>silent</p><p>类型： boolean</p><p>默认值： false</p><p>用法：</p><p>Vue.config.silent = true<br>//取消 Vue 所有的日志与警告。<br>optionMergeStrategies</p><p>类型： { [key: string]: Function }</p><p>默认值： {}</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.optionMergeStrategies._my_option = <span class="keyword">function</span> (parent, child, vm) &#123;</span><br><span class="line"><span class="built_in">return</span> child + 1</span><br><span class="line">&#125;</span><br><span class="line">const Profile = Vue.extend(&#123;</span><br><span class="line">_my_option: 1</span><br><span class="line">&#125;)</span><br><span class="line">// Profile.options._my_option = 2</span><br><span class="line">//自定义合并策略的选项。</span><br><span class="line">//合并策略选项分别接受第一个参数作为父实例，第二个参数为子实例，Vue实例上下文被作为第三个参数传入</span><br></pre></td></tr></table></figure><p>devtools</p><p>类型： boolean</p><p>默认值： true (生产版为 false)</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">// 务必在加载 Vue 之后，立即同步设置以下内容</span><br><span class="line">Vue.config.devtools = <span class="literal">true</span></span><br><span class="line">//配置是否允许 vue-devtools 检查代码。开发版本默认为 <span class="literal">true</span>，生产版本默认为 <span class="literal">false</span>。生产版本设为 <span class="literal">true</span> 可以启用检查。</span><br><span class="line">errorHandler</span><br></pre></td></tr></table></figure><p>类型： Function</p><p>默认值： 默认抛出错误</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.errorHandler = <span class="keyword">function</span> (err, vm) &#123;</span><br><span class="line">// handle error</span><br><span class="line">&#125;</span><br><span class="line">//指定组件的渲染和观察期间未捕获错误的处理函数。这个处理函数被调用时，可获取错误信息和 Vue 实例。</span><br><span class="line">//Sentry, an error tracking service, provides official integration using this option.</span><br><span class="line">ignoredElements</span><br></pre></td></tr></table></figure><p>类型: Array</p><p>默认值: []</p><p>用法:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.ignoredElements = [</span><br><span class="line"><span class="string">'my-custom-web-component'</span>, <span class="string">'another-web-component'</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>须使 Vue 忽略在 Vue 之外的自定义元素 (e.g., 使用了 Web Components APIs)。否则，它会假设你忘记注册全局组件或者拼错了组件名称，从而抛出一个关于 Unknown custom element 的警告。<br>keyCodes</p><p>类型： { [key: string]: number | Array }</p><p>默认值： {}</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vue.config.keyCodes = &#123;</span><br><span class="line">v: 86,</span><br><span class="line">f1: 112,</span><br><span class="line">mediaPlayPause: 179,</span><br><span class="line">up: [38, 87]</span><br><span class="line">&#125;api</span><br><span class="line">//给 v-on 自定义键位别名。</span><br></pre></td></tr></table></figure><h2 id="4-Vue的全局API"><a href="#4-Vue的全局API" class="headerlink" title="4. Vue的全局API"></a>4. Vue的全局API</h2><h3 id="4-1-Vue-nextTick"><a href="#4-1-Vue-nextTick" class="headerlink" title="4.1. Vue.nextTick"></a>4.1. Vue.nextTick</h3><p>语法： Vue.nextTick( [callback, context] )</p><p>参数：<br>{Function} [callback]<br>{Object} [context]<br>用法： 在下次 DOM 更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的 DOM。</p><p>// 修改数据<br>vm.msg = ‘Hello’<br>// DOM 还没有更新<br>Vue.nextTick(function () {<br>  // DOM 更新了<br>})</p><h3 id="4-2-Vue-set"><a href="#4-2-Vue-set" class="headerlink" title="4.2. Vue.set"></a>4.2. Vue.set</h3><p>语法： Vue.set( object, key, value )</p><p>参数：<br>{Object} object<br>{string} key<br>{any} value<br>返回值： 设置的值.<br>用法：<br>设置对象的属性。如果对象是响应式的，确保属性被创建后也是响应式的，同时触发视图更新。这个方法主要用于避开 Vue 不能检测属性被添加的限制。 注意对象不能是 Vue 实例，或者 Vue 实例的根数据对象。</p><h3 id="4-3-Vue-compile"><a href="#4-3-Vue-compile" class="headerlink" title="4.3. Vue.compile"></a>4.3. Vue.compile</h3><p>语法：<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Vue.compile( template )</span><br></pre></td></tr></table></figure></p><p>参数：<br>{string} template</p><p>用法：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">//在render函数中编译模板字符串。只在独立构建时有效</span><br><span class="line">var res = Vue.compile(<span class="string">'&lt;div&gt;&lt;span&gt;&#123;&#123; msg &#125;&#125;&lt;/span&gt;&lt;/div&gt;'</span>)</span><br><span class="line">new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    msg: <span class="string">'hello'</span></span><br><span class="line">  &#125;,</span><br><span class="line">  render: res.render,</span><br><span class="line">  staticRenderFns: res.staticRenderFns</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="4-4-全局API总结"><a href="#4-4-全局API总结" class="headerlink" title="4.4. 全局API总结"></a>4.4. 全局API总结</h3><p>其实还有几个其他的全局API，不打算在这里讲了，比如扩展组件Vue.extend 的用法、Vue.use加载插件、Vue.filter加载过滤器、Vue.directive自定义指令等 后面再讲其他Vue的知识点的时候，再加上这些，全局API其实就是Vue类型的静态方法，全局范围内都可以使用的，某些实例的方法本质也是调用了这些全局的，后面用到时候再说。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1-Vue实例初始化的选项配置对象详解&quot;&gt;&lt;a href=&quot;#1-Vue实例初始化的选项配置对象详解&quot; class=&quot;headerlink&quot; title=&quot;1.Vue实例初始化的选项配置对象详解&quot;&gt;&lt;/a&gt;1.Vue实例初始化的选项配置对象详解&lt;/h2&gt;&lt;p&gt;前面我们已经用了很多次 new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。&lt;/p&gt;
&lt;h3 id=&quot;1-1-Vue实例的的data对象&quot;&gt;&lt;a href=&quot;#1-1-Vue实例的的data对象&quot; class=&quot;headerlink&quot; title=&quot;1.1. Vue实例的的data对象&quot;&gt;&lt;/a&gt;1.1. Vue实例的的data对象&lt;/h3&gt;&lt;p&gt;Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。&lt;/p&gt;
&lt;h4 id=&quot;data对象的类型：&quot;&gt;&lt;a href=&quot;#data对象的类型：&quot; class=&quot;headerlink&quot; title=&quot;data对象的类型：&quot;&gt;&lt;/a&gt;data对象的类型：&lt;/h4&gt;&lt;p&gt;类型是Object或者Function。&lt;br&gt;如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】&lt;/p&gt;
&lt;h4 id=&quot;实例：&quot;&gt;&lt;a href=&quot;#实例：&quot; class=&quot;headerlink&quot; title=&quot;实例：&quot;&gt;&lt;/a&gt;实例：&lt;/h4&gt;&lt;figure class=&quot;highlight bash&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;// 创建普通的Vue实例&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var vm = new Vue(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: data&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// 组件定义【后面会详细讲的】&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;// Vue.extend() 中 data 必须是函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;var Component = Vue.extend(&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  data: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;title&quot;&gt;function&lt;/span&gt;&lt;/span&gt; () &amp;#123;   //这里必须是函数！！！！&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;return&lt;/span&gt; &amp;#123; a: 1 &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &amp;#125;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/Javascript/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>hexo</title>
    <link href="http://yoursite.com/2017/12/08/hello-world/"/>
    <id>http://yoursite.com/2017/12/08/hello-world/</id>
    <published>2017-12-08T07:56:55.456Z</published>
    <updated>2017-12-10T12:33:37.756Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="杂谈" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/"/>
    
      <category term="hexo" scheme="http://yoursite.com/categories/%E6%9D%82%E8%B0%88/hexo/"/>
    
    
      <category term="hexo" scheme="http://yoursite.com/tags/hexo/"/>
    
      <category term="next" scheme="http://yoursite.com/tags/next/"/>
    
  </entry>
  
</feed>
