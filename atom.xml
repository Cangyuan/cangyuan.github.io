<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Orca&#39;s Notes</title>
  
  <subtitle>逆戟 · 个人博客</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2017-12-09T17:01:42.642Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ORCA</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>http详解</title>
    <link href="http://yoursite.com/2017/12/10/http%E8%AF%A6%E8%A7%A3/"/>
    <id>http://yoursite.com/2017/12/10/http详解/</id>
    <published>2017-12-09T17:00:58.000Z</published>
    <updated>2017-12-09T17:01:42.642Z</updated>
    
    <content type="html"><![CDATA[<p>web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据</p><p>客户端通过HTTP协议，向Server发送数据</p><p>主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）</p><p>HTTP message 格式有两种request和response</p><p>HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成</p><p>后继的几行是header line.</p><p>HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。</p><p>一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST</p><p>GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大</p><p>POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法</p><p>HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码</p><p>后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息</p><p>e.g. content-type：text/html 表示body中包含一个html 文件</p><p>一些常见的状态码：</p><p>200 OK :成功打开</p><p>301 Moved Permanently ：请求对象被永久移除</p><p>400 Bad Request ：错误的不能被服务器理解的请求</p><p>401 Not Found ： 请求的对象不在该服务器上</p><p>505 HTTP Version Not Supported ：服务器不支出当前请求message的HTTP版本<br><a id="more"></a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;web中的http协议 在写HTML的时候，form表单需要通过HTTP协议向服务器提交、查询数据&lt;/p&gt;
&lt;p&gt;客户端通过HTTP协议，向Server发送数据&lt;/p&gt;
&lt;p&gt;主要方式有GET和POST两种（其他的还有PUT、DELETE 和 HEAD）&lt;/p&gt;
&lt;p&gt;HTTP message 格式有两种request和response&lt;/p&gt;
&lt;p&gt;HTTP head 包含一些请求信息，第一行是request line，由方法字段（GET/POST等）、url、HTTP协议版本字段组成&lt;/p&gt;
&lt;p&gt;后继的几行是header line.&lt;/p&gt;
&lt;p&gt;HTTP entity body 在使用GET方法的时候为空，在使用POST方法的时候包含一些表单提交的信息和文件。&lt;/p&gt;
&lt;p&gt;一般请求数据时使用GET（如果不声明method，默认为GET），提交数据使用POST&lt;/p&gt;
&lt;p&gt;GET只能传送少量的数据，而且传送的数据都会显示在url中，安全性不大&lt;/p&gt;
&lt;p&gt;POST可以传送相较于GET更多的数据，上传文件（较多字节）、password（需要较高安全性）的时候需要采用POST的方法&lt;/p&gt;
&lt;p&gt;HTTP head 中的首行时状态行，包含了HTTP版本信息、状态码&lt;/p&gt;
&lt;p&gt;后继几行是header line, 指示了一些服务器版本和HTTP entity body 的信息&lt;/p&gt;
&lt;p&gt;e.g. content-type：text/html 表示body中包含一个html 文件&lt;/p&gt;
&lt;p&gt;一些常见的状态码：&lt;/p&gt;
&lt;p&gt;200 OK :成功打开&lt;/p&gt;
&lt;p&gt;301 Moved Permanently ：请求对象被永久移除&lt;/p&gt;
&lt;p&gt;400 Bad Request ：错误的不能被服务器理解的请求&lt;/p&gt;
&lt;p&gt;401 Not Found ： 请求的对象不在该服务器上&lt;/p&gt;
&lt;p&gt;505 HTTP Version Not Supported ：服务器不支出当前请求message的HTTP版本&lt;br&gt;
    
    </summary>
    
      <category term="Web" scheme="http://yoursite.com/categories/Web/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/Web/vue/"/>
    
    
      <category term="http" scheme="http://yoursite.com/tags/http/"/>
    
      <category term="web" scheme="http://yoursite.com/tags/web/"/>
    
  </entry>
  
  <entry>
    <title>Vue之实例详解与生命周期</title>
    <link href="http://yoursite.com/2017/12/08/vue-info/"/>
    <id>http://yoursite.com/2017/12/08/vue-info/</id>
    <published>2017-12-08T08:26:21.000Z</published>
    <updated>2017-12-09T16:58:51.806Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1-Vue实例初始化的选项配置对象详解"><a href="#1-Vue实例初始化的选项配置对象详解" class="headerlink" title="1.Vue实例初始化的选项配置对象详解"></a>1.Vue实例初始化的选项配置对象详解</h2><p>前面我们已经用了很多次 new Vue({…})的代码，而且Vue初始化的选项都已经用了data、methods、el、computedd等,估计您看到这里时，应该已经都明白了他们的作用，我们就详细讲解一下他们的使用情况。</p><h3 id="1-1-Vue实例的的data对象"><a href="#1-1-Vue实例的的data对象" class="headerlink" title="1.1. Vue实例的的data对象"></a>1.1. Vue实例的的data对象</h3><p>Vue的实例的数据对象data 我们已经用了很多了，数据绑定离不开data里面的数据。也是Vue的核心属性。 它是Vue绑定数据到HTML标签的数据源泉，另外Vue框架会自动监视data里面的数据变化，自动更新数据到HTML标签上去。本质原理是：Vue会自动将data里面的数据进行递归抓换成getter和setter，然后就可以自动更新HTML标签了，当然用getter和setter所以老的浏览器Vue支持的不够好。</p><h4 id="data对象的类型："><a href="#data对象的类型：" class="headerlink" title="data对象的类型："></a>data对象的类型：</h4><p>类型是Object或者Function。<br>如果是组件对象中，data必须是Function类型。【后面学了组件后就明白了，暂时对组件先放放。】</p><h4 id="实例："><a href="#实例：" class="headerlink" title="实例："></a>实例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">// 创建普通的Vue实例</span><br><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: data</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">// 组件定义【后面会详细讲的】</span><br><span class="line">// Vue.extend() 中 data 必须是函数</span><br><span class="line">var Component = Vue.extend(&#123;</span><br><span class="line">  data: <span class="function"><span class="title">function</span></span> () &#123;   //这里必须是函数！！！！</span><br><span class="line">    <span class="built_in">return</span> &#123; a: 1 &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h3 id="1-2-Vue实例的computed"><a href="#1-2-Vue实例的computed" class="headerlink" title="1.2. Vue实例的computed"></a>1.2. Vue实例的computed</h3><p>Vue的计算属性（computed)的属性会自动混入Vue的实例中。所有 getter 和 setter 的 this 上下文自动地绑定为 Vue 实例。这就很强大了，再计算属性中定义的函数里面可以直接使用指向了vue实例的this，异常方便的啊。</p><p>类型<br>{ 键：函数} { [key: string]: Function | { get: Function, set: Function } } 当然，可以省略setter,如果省略了setter，那么值就可以是普通函数，但是必须有返回值。</p><h4 id="官方的实例"><a href="#官方的实例" class="headerlink" title="官方的实例"></a>官方的实例</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">data: &#123; a: 1 &#125;,</span><br><span class="line">computed: &#123;</span><br><span class="line">  // 仅读取，值只须为函数</span><br><span class="line">  aDouble: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">    <span class="built_in">return</span> this.a * 2</span><br><span class="line">  &#125;,</span><br><span class="line">  // 读取和设置</span><br><span class="line">  aPlus: &#123;</span><br><span class="line">    get: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      <span class="built_in">return</span> this.a + 1</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="built_in">set</span>: <span class="keyword">function</span> (v) &#123;</span><br><span class="line">      this.a = v - 1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.aPlus   // -&gt; 2</span><br><span class="line">vm.aPlus = 3</span><br><span class="line">vm.a       // -&gt; 2</span><br><span class="line">vm.aDouble // -&gt; 4</span><br></pre></td></tr></table></figure><h3 id="1-3-methods"><a href="#1-3-methods" class="headerlink" title="1.3. methods"></a>1.3. methods</h3><p>methods 将被混入到 Vue 实例中。可以直接通过 VM 实例访问这些方法，或者在指令表达式中使用。方法中的 this 自动绑定为 Vue 实例。</p><p>注意，不应该使用箭头函数来定义 method 函数 (例如 plus: () =&gt; this.a++)。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.a 将是 undefined。</p><p>示例:</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123; a: 1 &#125;,</span><br><span class="line">  methods: &#123;</span><br><span class="line">    plus: <span class="function"><span class="title">function</span></span> () &#123;</span><br><span class="line">      this.a++</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.plus()</span><br><span class="line">vm.a // 2</span><br></pre></td></tr></table></figure><h3 id="1-4-watch"><a href="#1-4-watch" class="headerlink" title="1.4. watch"></a>1.4. watch</h3><p>一个对象，键是需要观察的表达式，值是对应回调函数。值也可以是方法名，或者包含选项的对象。Vue 实例将会在实例化时调用 $watch()，遍历 watch 对象的每一个属性。</p><h4 id="示例"><a href="#示例" class="headerlink" title="示例:"></a>示例:</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var vm = new Vue(&#123;</span><br><span class="line">  data: &#123;</span><br><span class="line">    a: 1,</span><br><span class="line">    b: 2,</span><br><span class="line">    c: 3</span><br><span class="line">  &#125;,</span><br><span class="line">  watch: &#123;</span><br><span class="line">    // 监控a变量变化的时候，自动执行此函数</span><br><span class="line">    a: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">      console.log(<span class="string">'new: %s, old: %s'</span>, val, oldVal)</span><br><span class="line">    &#125;,</span><br><span class="line">    // 深度 watcher</span><br><span class="line">    c: &#123;</span><br><span class="line">      handler: <span class="keyword">function</span> (val, oldVal) &#123; /* ... */ &#125;,</span><br><span class="line">      deep: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;)</span><br><span class="line">vm.a = 2 // -&gt; new: 2, old: 1</span><br><span class="line">//注意，不应该使用箭头函数来定义 watcher 函数 (例如 searchQuery: newValue =&gt; this.updateAutocomplete(newValue))。理由是箭头函数绑定了父级作用域的上下文，所以 this 将不会按照期望指向 Vue 实例，this.updateAutocomplete 将是 undefined。</span><br></pre></td></tr></table></figure><h4 id="参考综合案例："><a href="#参考综合案例：" class="headerlink" title="参考综合案例："></a>参考综合案例：</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!DOCTYPE html&gt; </span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">  &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">  &lt;title&gt;Vue入门之数据监控&lt;/title&gt;</span><br><span class="line">  &lt;script src=<span class="string">"https://unpkg.com/vue/dist/vue.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">  &lt;div id=<span class="string">"app"</span>&gt;</span><br><span class="line">    &lt;p&gt;&#123;&#123; number &#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;input <span class="built_in">type</span>=<span class="string">"button"</span> name=<span class="string">"btnGetNumber"</span> value=<span class="string">"增加"</span> v-on:click=<span class="string">"getNumber()"</span>&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">  &lt;script&gt;</span><br><span class="line">    var app = new Vue(&#123;         </span><br><span class="line">      el: <span class="string">'#app'</span>,               </span><br><span class="line">      data: &#123;                   </span><br><span class="line">        number: 1</span><br><span class="line">      &#125;,</span><br><span class="line">      methods: &#123;</span><br><span class="line">        // 事件响应方法的逻辑代码</span><br><span class="line">        getNumber: <span class="keyword">function</span> (e) &#123;</span><br><span class="line">          this.number += 1;   // 不管是内联方法调用，还是绑定事件处理器两种方式执行事件响应方法的时候 this都是指向 app</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;,</span><br><span class="line">      watch: &#123;</span><br><span class="line">        // 监控number的变化，并自动执行下面的函数</span><br><span class="line">        number: <span class="keyword">function</span> (val, oldVal) &#123;</span><br><span class="line">          console.log(<span class="string">'val:'</span> + val + <span class="string">' - oldVal: '</span> + oldVal);</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">  &lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h2 id="1-5-设置el的详解"><a href="#1-5-设置el的详解" class="headerlink" title="1.5. 设置el的详解"></a>1.5. 设置el的详解</h2><p>提供一个在页面上已存在的 DOM 元素作为 Vue 实例的挂载目标,也就是说Vue绑定数据到哪里去找。可以是CSS 选择器，也可以是一个 HTMLElement实例。</p><p>在实例挂载之后(生命周期的内容后面会详细讲的奥)， 元素可以用 vm.$el 访问。</p><p>如果这个选项在实例化时有作用，实例将立即进入编译过程，否则，需要显式调用 vm.$mount() 手动开启编译。</p><p>// 几乎所有例子都用到这个，所以就不再赘述</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var app = new Vue(&#123;         </span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  ...</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;1-Vue实例初始化的选项配置对象详解&quot;&gt;&lt;a href=&quot;#1-Vue实例初始化的选项配置对象详解&quot; class=&quot;headerlink&quot; title=&quot;1.Vue实例初始化的选项配置对象详解&quot;&gt;&lt;/a&gt;1.Vue实例初始化的选项配置对象详解&lt;/h2&gt;&lt;p&gt;前面
      
    
    </summary>
    
      <category term="Javascript" scheme="http://yoursite.com/categories/Javascript/"/>
    
      <category term="vue" scheme="http://yoursite.com/categories/Javascript/vue/"/>
    
    
      <category term="vue" scheme="http://yoursite.com/tags/vue/"/>
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2017/12/08/hello-world/"/>
    <id>http://yoursite.com/2017/12/08/hello-world/</id>
    <published>2017-12-08T07:56:55.456Z</published>
    <updated>2017-12-09T07:03:18.058Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
      <category term="目录" scheme="http://yoursite.com/categories/%E7%9B%AE%E5%BD%95/"/>
    
      <category term="js" scheme="http://yoursite.com/categories/%E7%9B%AE%E5%BD%95/js/"/>
    
    
      <category term="angular" scheme="http://yoursite.com/tags/angular/"/>
    
  </entry>
  
</feed>
